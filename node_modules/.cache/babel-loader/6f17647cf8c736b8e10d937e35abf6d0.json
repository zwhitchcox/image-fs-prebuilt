{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\src\\\\Clusters\\\\Create\\\\CreateRun.tsx\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport \"./CreateRun.css\";\nimport ActionsContext from '../../Contexts/ActionsContext';\nimport SSHTerminal from '../../Terminals/SSHTerminal';\nimport RunMultipleSSH from '../Manage/RunMultipleSSH';\nimport { useHistory } from 'react-router-dom';\nimport { IS_DEV, TEST_CLUSTER, USE_TEST_CLUSTER, CRUSTER_DIR } from '../../constants';\nconst statuses = {\n  INITIALIZING_MASTER: \"Initializing master...\",\n  INITIALIZING_SLAVES: \"Initializing slaves...\",\n  INITIALIZING_CNI: \"Initializing CNI...\",\n  INACTIVE: \"\"\n};\nexport const getHostname = ({\n  clusterName,\n  cluster,\n  ip,\n  index\n}) => `${clusterName ? clusterName + \"-\" : \"\"}` + `${cluster.master === ip ? \"master\" : \"slave-\" + (index + 1)}`;\n\nconst CreateRun = ({\n  cluster,\n  clusterName\n}) => {\n  if (IS_DEV && USE_TEST_CLUSTER) {\n    cluster = TEST_CLUSTER;\n  }\n\n  const history = useHistory();\n  const {\n    INITIALIZING_MASTER,\n    INITIALIZING_SLAVES,\n    INITIALIZING_CNI,\n    INACTIVE\n  } = statuses;\n  const {\n    sshTerm,\n    multiSSH\n  } = useContext(ActionsContext);\n  const [status, setStatus] = useState(INACTIVE);\n  const [term, setTerm] = useState();\n  const [processes, setProcesses] = useState([]);\n  const [note, setNote] = useState(\"\");\n  const [finished, setFinished] = useState(false);\n\n  const common = async ({\n    runCmd,\n    ip,\n    index\n  }) => {\n    const hostname = getHostname({\n      clusterName,\n      cluster,\n      ip,\n      index\n    });\n    await runCmd({\n      status: `Setting hostname ${hostname} for ${ip}`,\n      cmd: `echo ${hostname} > /etc/hostname\\nsudo hostnamectl set-hostname ${hostname}`\n    });\n    await runCmd({\n      status: `Setting clustername ${clusterName} for ${ip}`,\n      cmd: `echo ${clusterName} > ${CRUSTER_DIR}/clustername`\n    });\n    await runCmd({\n      status: `Setting masterip ${cluster.master} for ${ip}`,\n      cmd: `echo ${cluster.master} > ${CRUSTER_DIR}/masterip`\n    });\n  };\n\n  const joinSlaves = async joinCmd => {\n    const {\n      startAll,\n      processes,\n      endAll\n    } = multiSSH({\n      ips: cluster.slaves,\n      hostname: 'root',\n      interactive: true\n    });\n    setStatus(INITIALIZING_SLAVES);\n    setProcesses(processes);\n    await new Promise((res, rej) => setTimeout(res, 1000));\n    await startAll();\n    await new Promise((res, rej) => setTimeout(res, 1000));\n    await Promise.all(processes.map(async ({\n      ip,\n      runCmd\n    }, index) => {\n      await runCmd({\n        status: `Initializing slave ${ip}`,\n        cmd: joinCmd\n      });\n      await common({\n        runCmd,\n        ip,\n        index\n      });\n      await runCmd({\n        status: \"\",\n        cmd: `echo SLAVE > ${CRUSTER_DIR}/status`\n      });\n    }));\n    setFinished(true);\n    await endAll();\n    setStatus(INACTIVE);\n    history.push(\"/clusters/manage\");\n  };\n\n  useEffect(() => {\n    const {\n      term,\n      runCmd,\n      endTerm,\n      startTerm,\n      getOutput\n    } = sshTerm({\n      host: cluster.master,\n      username: \"root\"\n    });\n    setTerm(term);\n    const hostname = getHostname({\n      clusterName,\n      cluster,\n      ip: cluster.master,\n      index: 0\n    });\n    const initMasterCmd = `kubeadm init  --pod-network-cidr=10.244.0.0/16 --node-name=${hostname}\n      kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n      kubeadm token create --print-join-command\n      echo MASTER > ${CRUSTER_DIR}/status\n      mkdir -p $HOME/.kube\n      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n      sudo chown $(id -u):$(id -g) $HOME/.kube/config\n      `;\n\n    (async () => {\n      await startTerm();\n      setStatus(INITIALIZING_MASTER);\n      setNote(\"Pulling the images can take some time. Don't exit, or you will have to redo it!\");\n      await runCmd({\n        status: INITIALIZING_MASTER,\n        cmd: initMasterCmd\n      });\n      await runCmd({\n        status: `Setting clustername ${clusterName} for ${cluster.master}`,\n        cmd: `echo ${clusterName} > ${CRUSTER_DIR}/clustername`\n      });\n      await common({\n        runCmd,\n        ip: cluster.master,\n        index: 0\n      }); // get rid of warning\n\n      const outputLines = (await getOutput({\n        cmd: \"kubeadm token create --print-join-command\"\n      })).split(\"\\n\");\n      const joinCmd = outputLines[outputLines.length - 2];\n      await joinSlaves(joinCmd);\n      await endTerm();\n      await initializeCNI();\n      setTerm(null);\n    })();\n\n    return endTerm;\n  }, []);\n\n  const initializeCNI = async () => {\n    setNote(\"\");\n    const {\n      term,\n      runCmd,\n      endTerm,\n      startTerm\n    } = sshTerm({\n      host: cluster.master,\n      username: \"root\"\n    });\n    setTerm(term);\n    await startTerm();\n    setStatus(INITIALIZING_CNI);\n    await runCmd({\n      status: INITIALIZING_CNI,\n      cmd: `kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml`\n    });\n    await endTerm();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, status), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, \"Note: \", note), !term ? \"\" : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(SSHTerminal, {\n    term: term,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  })), !processes.length ? \"\" : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(RunMultipleSSH, {\n    processes: processes,\n    finished: finished,\n    showInit: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default CreateRun;","map":{"version":3,"sources":["C:/Users/zwhit/dev/cruster/app/src/Clusters/Create/CreateRun.tsx"],"names":["React","useEffect","useState","useContext","ActionsContext","SSHTerminal","RunMultipleSSH","useHistory","IS_DEV","TEST_CLUSTER","USE_TEST_CLUSTER","CRUSTER_DIR","statuses","INITIALIZING_MASTER","INITIALIZING_SLAVES","INITIALIZING_CNI","INACTIVE","getHostname","clusterName","cluster","ip","index","master","CreateRun","history","sshTerm","multiSSH","status","setStatus","term","setTerm","processes","setProcesses","note","setNote","finished","setFinished","common","runCmd","hostname","cmd","joinSlaves","joinCmd","startAll","endAll","ips","slaves","interactive","Promise","res","rej","setTimeout","all","map","push","endTerm","startTerm","getOutput","host","username","initMasterCmd","outputLines","split","length","initializeCNI"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react'\r\nimport \"./CreateRun.css\"\r\nimport ActionsContext from '../../Contexts/ActionsContext';\r\nimport SSHTerminal from '../../Terminals/SSHTerminal';\r\nimport RunMultipleSSH from '../Manage/RunMultipleSSH';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport {\r\n  IS_DEV,\r\n  TEST_CLUSTER,\r\n  USE_TEST_CLUSTER,\r\n  CRUSTER_DIR,\r\n} from '../../constants'\r\n\r\nconst statuses = {\r\n  INITIALIZING_MASTER: \"Initializing master...\",\r\n  INITIALIZING_SLAVES: \"Initializing slaves...\",\r\n  INITIALIZING_CNI: \"Initializing CNI...\",\r\n  INACTIVE: \"\",\r\n}\r\n\r\nexport const getHostname = ({clusterName, cluster, ip, index}) => (\r\n  `${clusterName ? clusterName + \"-\" : \"\"}` +\r\n  `${cluster.master === ip ? \"master\" : \"slave-\" +(index+1)}`\r\n)\r\n\r\n\r\nconst CreateRun = ({cluster, clusterName}) => {\r\n  if (IS_DEV && USE_TEST_CLUSTER) {\r\n    cluster = TEST_CLUSTER\r\n  }\r\n  const history = useHistory()\r\n  const {\r\n    INITIALIZING_MASTER,\r\n    INITIALIZING_SLAVES,\r\n    INITIALIZING_CNI,\r\n    INACTIVE,\r\n  } = statuses\r\n  const {sshTerm, multiSSH} = useContext(ActionsContext)\r\n  const [status, setStatus] = useState(INACTIVE)\r\n  const [term, setTerm] = useState<any>()\r\n  const [processes, setProcesses] = useState<any[]>([])\r\n  const [note, setNote] = useState(\"\")\r\n  const [finished, setFinished] = useState(false)\r\n  const common = async ({runCmd, ip, index}) => {\r\n    const hostname = getHostname({\r\n        clusterName,\r\n        cluster,\r\n        ip,\r\n        index,\r\n      })\r\n    await runCmd({\r\n      status: `Setting hostname ${hostname} for ${ip}`,\r\n      cmd: `echo ${hostname} > /etc/hostname\\nsudo hostnamectl set-hostname ${hostname}`\r\n    })\r\n    await runCmd({\r\n      status: `Setting clustername ${clusterName} for ${ip}`,\r\n      cmd: `echo ${clusterName} > ${CRUSTER_DIR}/clustername`\r\n    })\r\n    await runCmd({\r\n      status: `Setting masterip ${cluster.master} for ${ip}`,\r\n      cmd: `echo ${cluster.master} > ${CRUSTER_DIR}/masterip`\r\n    })\r\n  }\r\n  const joinSlaves = async (joinCmd: string) => {\r\n    const {startAll, processes, endAll} = multiSSH({\r\n      ips: cluster.slaves,\r\n      hostname: 'root',\r\n      interactive: true,\r\n    })\r\n    setStatus(INITIALIZING_SLAVES)\r\n    setProcesses(processes)\r\n    await new Promise((res, rej) => setTimeout(res, 1000))\r\n    await startAll()\r\n    await new Promise((res, rej) => setTimeout(res, 1000))\r\n    await Promise.all(processes.map(async ({ip, runCmd}, index) => {\r\n      await runCmd({\r\n        status: `Initializing slave ${ip}`,\r\n        cmd: joinCmd,\r\n      })\r\n      await common({runCmd, ip, index})\r\n      await runCmd({\r\n        status: \"\",\r\n        cmd: `echo SLAVE > ${CRUSTER_DIR}/status`\r\n      })\r\n    }))\r\n\r\n    setFinished(true)\r\n    await endAll()\r\n    setStatus(INACTIVE)\r\n\r\n    history.push(\"/clusters/manage\")\r\n  }\r\n  useEffect(() => {\r\n    const {term, runCmd, endTerm, startTerm, getOutput} = sshTerm({\r\n      host: cluster.master,\r\n      username: \"root\",\r\n    })\r\n    setTerm(term)\r\n    const hostname = getHostname({\r\n        clusterName,\r\n        cluster,\r\n        ip: cluster.master,\r\n        index:0,\r\n      })\r\n      const initMasterCmd =\r\n      `kubeadm init  --pod-network-cidr=10.244.0.0/16 --node-name=${hostname}\r\n      kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\r\n      kubeadm token create --print-join-command\r\n      echo MASTER > ${CRUSTER_DIR}/status\r\n      mkdir -p $HOME/.kube\r\n      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\r\n      sudo chown $(id -u):$(id -g) $HOME/.kube/config\r\n      `\r\n\r\n    ;(async () =>{\r\n      await startTerm()\r\n      setStatus(INITIALIZING_MASTER)\r\n      setNote(\"Pulling the images can take some time. Don't exit, or you will have to redo it!\")\r\n      await runCmd({\r\n        status: INITIALIZING_MASTER,\r\n        cmd: initMasterCmd,\r\n      })\r\n      await runCmd({\r\n        status: `Setting clustername ${clusterName} for ${cluster.master}`,\r\n        cmd: `echo ${clusterName} > ${CRUSTER_DIR}/clustername`\r\n      })\r\n\r\n      await common({runCmd, ip: cluster.master, index: 0})\r\n\r\n      // get rid of warning\r\n      const outputLines = (await getOutput({cmd: \"kubeadm token create --print-join-command\"})).split(\"\\n\")\r\n      const joinCmd = outputLines[outputLines.length - 2]\r\n      await joinSlaves(joinCmd)\r\n      await endTerm()\r\n      await initializeCNI()\r\n      setTerm(null)\r\n    })()\r\n    return endTerm\r\n  }, [])\r\n  const initializeCNI = async () => {\r\n      setNote(\"\")\r\n    const {term, runCmd, endTerm, startTerm} = sshTerm({\r\n      host: cluster.master,\r\n      username: \"root\",\r\n    })\r\n    setTerm(term)\r\n\r\n    await startTerm()\r\n    setStatus(INITIALIZING_CNI)\r\n    await runCmd({\r\n      status: INITIALIZING_CNI,\r\n      cmd: `kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml`\r\n    })\r\n\r\n    await endTerm()\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <h4>{status}</h4>\r\n      <div className=\"warning\">Note: {note}</div>\r\n      {!term ? \"\" : <div>\r\n        <SSHTerminal term={term} />\r\n      </div>}\r\n      {!processes.length ? \"\" : (\r\n        <div>\r\n          <RunMultipleSSH processes={processes} finished={finished} showInit={true} />\r\n        </div>\r\n      )}\r\n    </div>\r\n\r\n\r\n  )\r\n}\r\nexport default CreateRun\r\n"]},"metadata":{},"sourceType":"module"}