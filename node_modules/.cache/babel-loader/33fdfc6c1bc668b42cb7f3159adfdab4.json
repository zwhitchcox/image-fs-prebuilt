{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useContext,useEffect}from'react';import ActionsContext from'../../Contexts/ActionsContext';import SystemInfoContext from'../../Contexts/SystemInfoContext';import RunMultipleSSH from'./RunMultipleSSH';import{TEST_CLUSTER,RESET_MASTER_WITH_ALL,RESET_CMD}from'../../constants';var ResetAll=function ResetAll(){var _useContext=useContext(SystemInfoContext),nodes=_useContext.nodes;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),processes=_useState2[0],setProcesses=_useState2[1];var _useContext2=useContext(ActionsContext),multiSSH=_useContext2.multiSSH;var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),finished=_useState4[0],setFinished=_useState4[1];var ips=Object.keys(nodes);var toReset=ips.filter(function(ip){return ip!==TEST_CLUSTER.master||RESET_MASTER_WITH_ALL;});useEffect(function(){var _multiSSH=multiSSH({ips:toReset,username:'root',interactive:true}),runAll=_multiSSH.runAll,startAll=_multiSSH.startAll,endAll=_multiSSH.endAll,processes=_multiSSH.processes;setProcesses(processes);_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return startAll();case 2:_context.next=4;return runAll({cmd:RESET_CMD});case 4:setFinished(true);case 5:case\"end\":return _context.stop();}}},_callee);}))();return endAll;},[]);return/*#__PURE__*/React.createElement(RunMultipleSSH,{processes:processes,finished:finished,showInit:false});};export default ResetAll;","map":{"version":3,"sources":["C:/Users/zwhit/dev/cruster/app/src/Clusters/Manage/ResetAll.tsx"],"names":["React","useState","useContext","useEffect","ActionsContext","SystemInfoContext","RunMultipleSSH","TEST_CLUSTER","RESET_MASTER_WITH_ALL","RESET_CMD","ResetAll","nodes","processes","setProcesses","multiSSH","finished","setFinished","ips","Object","keys","toReset","filter","ip","master","username","interactive","runAll","startAll","endAll","cmd"],"mappings":"0dAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,CAAsCC,SAAtC,KAAuD,OAAvD,CACA,MAAOC,CAAAA,cAAP,KAA2B,+BAA3B,CACA,MAAOC,CAAAA,iBAAP,KAA8B,kCAA9B,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,OAASC,YAAT,CAAuBC,qBAAvB,CAA2DC,SAA3D,KAA4E,iBAA5E,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,iBACHR,UAAU,CAACG,iBAAD,CADP,CACbM,KADa,aACbA,KADa,eAEaV,QAAQ,CAAM,EAAN,CAFrB,wCAEdW,SAFc,eAEHC,YAFG,gCAGAX,UAAU,CAACE,cAAD,CAHV,CAGbU,QAHa,cAGbA,QAHa,gBAIWb,QAAQ,CAAC,KAAD,CAJnB,yCAIdc,QAJc,eAIJC,WAJI,eAKrB,GAAMC,CAAAA,GAAG,CAAGC,MAAM,CAACC,IAAP,CAAYR,KAAZ,CAAZ,CACA,GAAMS,CAAAA,OAAO,CAAGH,GAAG,CAACI,MAAJ,CAAW,SAAAC,EAAE,QAAKA,CAAAA,EAAE,GAAKf,YAAY,CAACgB,MAArB,EAAgCf,qBAApC,EAAb,CAAhB,CACAL,SAAS,CAAC,UAAM,eACgCW,QAAQ,CAAC,CACrDG,GAAG,CAAEG,OADgD,CAErDI,QAAQ,CAAE,MAF2C,CAGrDC,WAAW,CAAE,IAHwC,CAAD,CADxC,CACPC,MADO,WACPA,MADO,CACCC,QADD,WACCA,QADD,CACWC,MADX,WACWA,MADX,CACmBhB,SADnB,WACmBA,SADnB,CAMdC,YAAY,CAACD,SAAD,CAAZ,CACC,wDAAC,yJACMe,CAAAA,QAAQ,EADd,8BAEMD,CAAAA,MAAM,CAAC,CAACG,GAAG,CAAEpB,SAAN,CAAD,CAFZ,QAGAO,WAAW,CAAC,IAAD,CAAX,CAHA,sDAAD,KAKD,MAAOY,CAAAA,MAAP,CACD,CAbQ,CAaN,EAbM,CAAT,CAcA,mBACE,oBAAC,cAAD,EAAgB,SAAS,CAAEhB,SAA3B,CAAsC,QAAQ,CAAEG,QAAhD,CAA0D,QAAQ,CAAE,KAApE,EADF,CAGD,CAxBD,CA0BA,cAAeL,CAAAA,QAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\r\nimport ActionsContext from '../../Contexts/ActionsContext';\r\nimport SystemInfoContext from '../../Contexts/SystemInfoContext';\r\nimport RunMultipleSSH from './RunMultipleSSH';\r\nimport { TEST_CLUSTER, RESET_MASTER_WITH_ALL, CRUSTER_DIR, RESET_CMD } from '../../constants';\r\n\r\nconst ResetAll = () => {\r\n  const { nodes } = useContext(SystemInfoContext)\r\n  const [processes, setProcesses] = useState<any>([])\r\n  const { multiSSH } = useContext(ActionsContext)\r\n  const [finished, setFinished] = useState(false)\r\n  const ips = Object.keys(nodes)\r\n  const toReset = ips.filter(ip => (ip !== TEST_CLUSTER.master) || RESET_MASTER_WITH_ALL)\r\n  useEffect(() => {\r\n    const {runAll, startAll, endAll, processes} = multiSSH({\r\n      ips: toReset,\r\n      username: 'root',\r\n      interactive: true,\r\n    })\r\n    setProcesses(processes)\r\n    ;(async () => {\r\n      await startAll()\r\n      await runAll({cmd: RESET_CMD})\r\n      setFinished(true)\r\n    })()\r\n    return endAll\r\n  }, [])\r\n  return (\r\n    <RunMultipleSSH processes={processes} finished={finished} showInit={false} />\r\n  )\r\n}\r\n\r\nexport default ResetAll"]},"metadata":{},"sourceType":"module"}