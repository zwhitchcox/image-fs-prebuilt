{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\src\\\\Clusters\\\\Manage\\\\ResetAll.tsx\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport ActionsContext from '../../Contexts/ActionsContext';\nimport SystemInfoContext from '../../Contexts/SystemInfoContext';\nimport RunMultipleSSH from './RunMultipleSSH';\nimport { TEST_CLUSTER, RESET_MASTER_WITH_ALL, RESET_CMD } from '../../constants';\n\nconst ResetAll = () => {\n  const {\n    nodes\n  } = useContext(SystemInfoContext);\n  const [processes, setProcesses] = useState([]);\n  const {\n    multiSSH\n  } = useContext(ActionsContext);\n  const [finished, setFinished] = useState(false);\n  const ips = Object.keys(nodes);\n  const toReset = ips.filter(ip => ip !== TEST_CLUSTER.master || RESET_MASTER_WITH_ALL);\n  useEffect(() => {\n    const {\n      runAll,\n      startAll,\n      endAll,\n      processes\n    } = multiSSH({\n      ips: toReset,\n      username: 'root',\n      interactive: true\n    });\n    setProcesses(processes);\n\n    (async () => {\n      await startAll();\n      await runAll({\n        cmd: RESET_CMD\n      });\n      setFinished(true);\n    })();\n\n    return endAll;\n  }, []);\n  return /*#__PURE__*/React.createElement(RunMultipleSSH, {\n    processes: processes,\n    finished: finished,\n    showInit: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default ResetAll;","map":{"version":3,"sources":["C:/Users/zwhit/dev/cruster/app/src/Clusters/Manage/ResetAll.tsx"],"names":["React","useState","useContext","useEffect","ActionsContext","SystemInfoContext","RunMultipleSSH","TEST_CLUSTER","RESET_MASTER_WITH_ALL","RESET_CMD","ResetAll","nodes","processes","setProcesses","multiSSH","finished","setFinished","ips","Object","keys","toReset","filter","ip","master","runAll","startAll","endAll","username","interactive","cmd"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,YAAT,EAAuBC,qBAAvB,EAA2DC,SAA3D,QAA4E,iBAA5E;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAYT,UAAU,CAACG,iBAAD,CAA5B;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAM,EAAN,CAA1C;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAeZ,UAAU,CAACE,cAAD,CAA/B;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMgB,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYR,KAAZ,CAAZ;AACA,QAAMS,OAAO,GAAGH,GAAG,CAACI,MAAJ,CAAWC,EAAE,IAAKA,EAAE,KAAKf,YAAY,CAACgB,MAArB,IAAgCf,qBAAjD,CAAhB;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAACqB,MAAAA,MAAD;AAASC,MAAAA,QAAT;AAAmBC,MAAAA,MAAnB;AAA2Bd,MAAAA;AAA3B,QAAwCE,QAAQ,CAAC;AACrDG,MAAAA,GAAG,EAAEG,OADgD;AAErDO,MAAAA,QAAQ,EAAE,MAF2C;AAGrDC,MAAAA,WAAW,EAAE;AAHwC,KAAD,CAAtD;AAKAf,IAAAA,YAAY,CAACD,SAAD,CAAZ;;AACC,KAAC,YAAY;AACZ,YAAMa,QAAQ,EAAd;AACA,YAAMD,MAAM,CAAC;AAACK,QAAAA,GAAG,EAAEpB;AAAN,OAAD,CAAZ;AACAO,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAJA;;AAKD,WAAOU,MAAP;AACD,GAbQ,EAaN,EAbM,CAAT;AAcA,sBACE,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAEd,SAA3B;AAAsC,IAAA,QAAQ,EAAEG,QAAhD;AAA0D,IAAA,QAAQ,EAAE,KAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD,CAxBD;;AA0BA,eAAeL,QAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\r\nimport ActionsContext from '../../Contexts/ActionsContext';\r\nimport SystemInfoContext from '../../Contexts/SystemInfoContext';\r\nimport RunMultipleSSH from './RunMultipleSSH';\r\nimport { TEST_CLUSTER, RESET_MASTER_WITH_ALL, CRUSTER_DIR, RESET_CMD } from '../../constants';\r\n\r\nconst ResetAll = () => {\r\n  const { nodes } = useContext(SystemInfoContext)\r\n  const [processes, setProcesses] = useState<any>([])\r\n  const { multiSSH } = useContext(ActionsContext)\r\n  const [finished, setFinished] = useState(false)\r\n  const ips = Object.keys(nodes)\r\n  const toReset = ips.filter(ip => (ip !== TEST_CLUSTER.master) || RESET_MASTER_WITH_ALL)\r\n  useEffect(() => {\r\n    const {runAll, startAll, endAll, processes} = multiSSH({\r\n      ips: toReset,\r\n      username: 'root',\r\n      interactive: true,\r\n    })\r\n    setProcesses(processes)\r\n    ;(async () => {\r\n      await startAll()\r\n      await runAll({cmd: RESET_CMD})\r\n      setFinished(true)\r\n    })()\r\n    return endAll\r\n  }, [])\r\n  return (\r\n    <RunMultipleSSH processes={processes} finished={finished} showInit={false} />\r\n  )\r\n}\r\n\r\nexport default ResetAll"]},"metadata":{},"sourceType":"module"}