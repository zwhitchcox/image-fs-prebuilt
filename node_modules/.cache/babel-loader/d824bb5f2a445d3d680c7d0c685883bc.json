{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\src\\\\Terminals\\\\LocalTerminal.tsx\";\nimport React, { useRef, useEffect, useContext } from 'react';\nimport \"xterm/css/xterm.css\";\nimport { Terminal } from 'xterm';\nimport \"./LocalTerminal.css\";\nimport { v4 } from 'uuid';\nimport SettingsContext from '../Contexts/SettingsContext';\n\nconst LocalTerminal = ({\n  su,\n  scripts,\n  clear,\n  unmount\n}) => {\n  const settings = useContext(SettingsContext);\n  const {\n    crusterDir,\n    sudoPassword\n  } = settings;\n  const ref = useRef({});\n  useEffect(() => {\n    if (!ref.current) return () => {};\n    const id = v4();\n    ipcRenderer.send(\"local-terminal\", {\n      id,\n      sudoPassword\n    });\n\n    const onReady = (event, msg) => {\n      if (msg.id === id) {\n        if (su) {\n          ipcRenderer.send(\"local-terminal-data\", {\n            id,\n            data: \"sudo su\\n\"\n          });\n          ipcRenderer.send(\"local-terminal-data\", {\n            id,\n            data: sudoPassword.trim() + \"\\n\"\n          });\n        }\n\n        setTimeout(() => {\n          ipcRenderer.send(\"local-terminal-run-scripts\", {\n            id,\n            env: {\n              CRUSTER_DIR: crusterDir,\n              IMG_NAME: \"node\"\n            },\n            scripts\n          });\n\n          const onCompleted = (event, msg) => {\n            if (msg.id === id) {\n              ipcRenderer.off('local-terminal-complete', onCompleted);\n\n              if (clear) {\n                ipcRenderer.send(\"local-terminal-data\", {\n                  id,\n                  data: \"clear\\n\"\n                });\n              }\n            }\n          };\n\n          ipcRenderer.on('local-terminal-complete', onCompleted);\n        }, 500);\n      }\n\n      ipcRenderer.off(\"local-terminal-ready\", onReady);\n    };\n\n    ipcRenderer.on(\"local-terminal-ready\", onReady);\n\n    const onData = (event, msg) => {\n      const {\n        data\n      } = msg;\n\n      if (msg.id === id) {\n        term.write(data);\n      }\n    };\n\n    const onClose = (event, msg) => {\n      if (id === msg.id) {\n        ipcRenderer.off('local-terminal-data', onData);\n        ipcRenderer.off('local-terminal-error', onData);\n        ipcRenderer.off('local-terminal-exit-code', onClose);\n        ipcRenderer.off('local-terminal-done', onDone);\n        ipcRenderer.send(\"local-terminal-data\", {\n          id,\n          data: \"exit\\n\"\n        });\n      }\n    };\n\n    const onDone = (event, msg) => {\n      console.log(\"done\");\n    };\n\n    ipcRenderer.on('local-terminal-done', onDone);\n    ipcRenderer.on('local-terminal-data', onData);\n    ipcRenderer.on('local-terminal-error', onData);\n    ipcRenderer.on('local-terminal-exit-code', onClose);\n    const term = new Terminal({\n      cols: 80,\n      rows: 24\n    });\n    term.open(ref.current);\n    term.onData(data => {\n      ipcRenderer.send(\"local-terminal-data\", {\n        id,\n        data\n      });\n    });\n    return () => {\n      if (unmount) {\n        ipcRenderer.send(\"local-terminal-unmount-exit\", {\n          id\n        });\n      } else {\n        ipcRenderer.send(\"local-terminal-end\", {\n          id\n        });\n      }\n    };\n  }, [ref]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"terminal\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default LocalTerminal;","map":{"version":3,"sources":["C:/Users/zwhit/dev/cruster/app/src/Terminals/LocalTerminal.tsx"],"names":["React","useRef","useEffect","useContext","Terminal","v4","SettingsContext","LocalTerminal","su","scripts","clear","unmount","settings","crusterDir","sudoPassword","ref","current","id","ipcRenderer","send","onReady","event","msg","data","trim","setTimeout","env","CRUSTER_DIR","IMG_NAME","onCompleted","off","on","onData","term","write","onClose","onDone","console","log","cols","rows","open"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState, useContext } from 'react'\r\nimport \"xterm/css/xterm.css\"\r\nimport { Terminal } from 'xterm'\r\nimport \"./LocalTerminal.css\"\r\nimport { WebLinksAddon } from 'xterm-addon-web-links'\r\nimport { dialog } from 'electron'\r\nimport {v4} from 'uuid'\r\nimport SettingsContext from '../Contexts/SettingsContext';\r\n\r\ndeclare var ipcRenderer;\r\n\r\nconst LocalTerminal = ({su, scripts, clear, unmount}) => {\r\n  const settings = useContext(SettingsContext)\r\n  const {crusterDir, sudoPassword} = settings\r\n  const ref:any = useRef({})\r\n  useEffect(() => {\r\n    if (!ref.current) return () => {}\r\n    const id = v4()\r\n    ipcRenderer.send(\"local-terminal\", {\r\n      id,\r\n      sudoPassword,\r\n    })\r\n\r\n    const onReady = (event, msg) => {\r\n      if (msg.id === id) {\r\n        if (su) {\r\n          ipcRenderer.send(\"local-terminal-data\", {\r\n            id,\r\n            data: \"sudo su\\n\",\r\n          })\r\n          ipcRenderer.send(\"local-terminal-data\", {\r\n            id,\r\n            data: sudoPassword.trim() + \"\\n\",\r\n          })\r\n        }\r\n\r\n        setTimeout(() => {\r\n          ipcRenderer.send(\"local-terminal-run-scripts\", {\r\n            id,\r\n            env: {\r\n              CRUSTER_DIR: crusterDir,\r\n              IMG_NAME: \"node\"\r\n            },\r\n            scripts,\r\n          })\r\n          const onCompleted = (event, msg) => {\r\n            if (msg.id === id) {\r\n              ipcRenderer.off('local-terminal-complete', onCompleted)\r\n              if (clear) {\r\n                ipcRenderer.send(\"local-terminal-data\", {\r\n                  id,\r\n                  data: \"clear\\n\",\r\n                })\r\n              }\r\n            }\r\n          }\r\n          ipcRenderer.on('local-terminal-complete', onCompleted)\r\n        },500)\r\n      }\r\n      ipcRenderer.off(\"local-terminal-ready\", onReady)\r\n    }\r\n\r\n    ipcRenderer.on(\"local-terminal-ready\", onReady)\r\n\r\n\r\n\r\n    const onData = (event, msg) => {\r\n      const {data} = msg\r\n      if (msg.id === id) {\r\n        term.write(data)\r\n      }\r\n    }\r\n\r\n    const onClose = (event, msg) => {\r\n      if (id === msg.id) {\r\n        ipcRenderer.off('local-terminal-data', onData)\r\n        ipcRenderer.off('local-terminal-error', onData)\r\n        ipcRenderer.off('local-terminal-exit-code', onClose)\r\n        ipcRenderer.off('local-terminal-done', onDone)\r\n          ipcRenderer.send(\"local-terminal-data\", {\r\n            id,\r\n            data: \"exit\\n\",\r\n          })\r\n      }\r\n    }\r\n\r\n    const onDone = (event, msg) => {\r\n      console.log(\"done\")\r\n    }\r\n\r\n    ipcRenderer.on('local-terminal-done', onDone)\r\n    ipcRenderer.on('local-terminal-data', onData)\r\n    ipcRenderer.on('local-terminal-error', onData)\r\n    ipcRenderer.on('local-terminal-exit-code', onClose)\r\n    const term = new Terminal({ cols: 80, rows: 24})\r\n    term.open(ref.current)\r\n    term.onData(data => {\r\n      ipcRenderer.send(\"local-terminal-data\", {\r\n        id,\r\n        data,\r\n      })\r\n    })\r\n\r\n    return () => {\r\n      if (unmount) {\r\n        ipcRenderer.send(\"local-terminal-unmount-exit\", {id})\r\n      } else {\r\n        ipcRenderer.send(\"local-terminal-end\", {id})\r\n      }\r\n    }\r\n  }, [ref])\r\n\r\n\r\n  return (\r\n    <div id=\"terminal\" ref={ref} />\r\n  )\r\n}\r\n\r\nexport default LocalTerminal"]},"metadata":{},"sourceType":"module"}