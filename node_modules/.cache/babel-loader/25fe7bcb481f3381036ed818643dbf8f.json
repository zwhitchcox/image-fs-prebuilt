{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\src\\\\Image\\\\Setup\\\\Keys.tsx\";\nimport React, { useContext, useState } from 'react';\nimport SettingsContext from '../../Contexts/SettingsContext';\nimport ActionsContext from '../../Contexts/ActionsContext';\n\nconst Keys = () => {\n  const [statusFile, setStatusFile] = useState(\"\");\n  const [statusGH, setStatusGH] = useState(\"\");\n  const settings = useContext(SettingsContext);\n  const {\n    runAction,\n    addToLog\n  } = useContext(ActionsContext);\n  const [ghUsername, setGHUsername] = useState(settings.defaultGithubUsername); // TODO: add help for every field\n\n  const [whyGHUsername, setWhyGHUsername] = useState(false);\n  const [enableReset, setEnableReset] = useState(true);\n  const [overwrite, setOverwrite] = useState(true);\n\n  const addKeysFromGithub = async () => {\n    if (ghUsername === \"\" || typeof ghUsername === \"undefined\") {\n      setStatusGH(\"No Github username specified\");\n      return;\n    }\n\n    setStatusGH(`Adding keys from ${ghUsername}`);\n\n    try {\n      await runAction({\n        type: \"add-public-keys-github\",\n        status: \"Adding SSH keys from github...\",\n        args: {\n          overwrite,\n          ghUsername,\n          enableReset\n        }\n      });\n      setStatusGH(\"Success!\");\n    } catch (err) {\n      setStatusGH(\"Error: see log for more details (top right)\");\n    }\n  };\n\n  const addKeysFromFile = async () => {\n    setStatusFile(`Adding keys from ${settings.publicKeyFile}`);\n\n    try {\n      await runAction({\n        type: \"add-public-keys-file\",\n        status: `Adding SSH keys from ${settings.publicKeyFile}...`,\n        args: {\n          overwrite\n        }\n      });\n      setStatusFile(`Success!`);\n    } catch (err) {\n      setStatusFile(\"Error: See log for more details (top right\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"top-margin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"SSH Keys\"), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"checkbox-container indent-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: overwrite,\n    onChange: () => setOverwrite(!overwrite),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"checkmark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), \"Overwrite Current Keys\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-input-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Github Username:\\xA0\\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"modal-link\",\n    onClick: () => setWhyGHUsername(!whyGHUsername),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, \"?\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"Your Github Username\",\n    className: \"text-field-github\",\n    type: \"text\",\n    onChange: e => setGHUsername(e.target.value),\n    value: ghUsername,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }))), !whyGHUsername ? \"\" : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, \"We can retrieve the public keys from your github account, so the app you can communicate with your raspberry pi without having to copy your keys manually (from https://github.com/<your username>.keys)\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"checkbox-container indent-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: enableReset,\n    onChange: () => setEnableReset(!enableReset),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"checkmark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }), \"Enable Reset GH Keys\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, statusGH), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addKeysFromGithub,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, \"Add SSH Keys From Github\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"key-file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Public key file: \", settings.publicKeyFile), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, statusFile), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addKeysFromFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, \"Add SSH Keys From File\"));\n};\n\nexport default Keys;","map":{"version":3,"sources":["C:/Users/zwhit/dev/cruster/app/src/Image/Setup/Keys.tsx"],"names":["React","useContext","useState","SettingsContext","ActionsContext","Keys","statusFile","setStatusFile","statusGH","setStatusGH","settings","runAction","addToLog","ghUsername","setGHUsername","defaultGithubUsername","whyGHUsername","setWhyGHUsername","enableReset","setEnableReset","overwrite","setOverwrite","addKeysFromGithub","type","status","args","err","addKeysFromFile","publicKeyFile","e","target","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport SettingsContext from '../../Contexts/SettingsContext';\r\nimport ActionsContext from '../../Contexts/ActionsContext';\r\nconst Keys = () => {\r\n  const [statusFile, setStatusFile] = useState(\"\")\r\n  const [statusGH, setStatusGH] = useState(\"\")\r\n  const settings = useContext(SettingsContext)\r\n  const { runAction, addToLog } = useContext(ActionsContext)\r\n  const [ghUsername, setGHUsername] = useState(settings.defaultGithubUsername)\r\n  // TODO: add help for every field\r\n  const [whyGHUsername, setWhyGHUsername] = useState(false)\r\n  const [enableReset, setEnableReset] = useState(true)\r\n  const [overwrite, setOverwrite] = useState(true)\r\n  const addKeysFromGithub = async () => {\r\n    if (ghUsername === \"\" || typeof ghUsername === \"undefined\") {\r\n      setStatusGH(\"No Github username specified\")\r\n      return\r\n    }\r\n    setStatusGH(`Adding keys from ${ghUsername}`)\r\n    try {\r\n      await runAction({\r\n        type: \"add-public-keys-github\",\r\n        status: \"Adding SSH keys from github...\",\r\n        args: {\r\n          overwrite,\r\n          ghUsername,\r\n          enableReset,\r\n        }\r\n      })\r\n      setStatusGH(\"Success!\")\r\n    } catch(err) {\r\n      setStatusGH(\"Error: see log for more details (top right)\")\r\n    }\r\n  }\r\n  const addKeysFromFile = async () => {\r\n    setStatusFile(`Adding keys from ${settings.publicKeyFile}`)\r\n    try {\r\n      await runAction({\r\n        type: \"add-public-keys-file\",\r\n        status: `Adding SSH keys from ${settings.publicKeyFile}...`,\r\n        args: {\r\n          overwrite,\r\n        }\r\n      })\r\n      setStatusFile(`Success!`)\r\n    } catch (err) {\r\n      setStatusFile(\"Error: See log for more details (top right\")\r\n    }\r\n  }\r\n  return (\r\n    <section>\r\n      <h3 className=\"top-margin\">SSH Keys</h3>\r\n      <label className=\"checkbox-container indent-1\">\r\n        <input type=\"checkbox\"\r\n          checked={overwrite}\r\n          onChange={() => setOverwrite(!overwrite)}\r\n        />\r\n        <span className=\"checkmark\" />\r\n        Overwrite Current Keys\r\n      </label>\r\n      <div className=\"text-input-container\">\r\n        <div className=\"label\">\r\n          Github Username:&nbsp;&nbsp;\r\n          <span className=\"modal-link\" onClick={() => setWhyGHUsername(!whyGHUsername)}>?</span>\r\n        </div>\r\n        <div>\r\n          <input\r\n            placeholder=\"Your Github Username\"\r\n            className=\"text-field-github\"\r\n            type=\"text\"\r\n            onChange={e => setGHUsername(e.target.value)}\r\n            value={ghUsername}\r\n          />\r\n        </div>\r\n      </div>\r\n      {!whyGHUsername ? \"\" : (\r\n        <div>\r\n          <p className=\"note\">\r\n            {\"We can retrieve the public keys from your github account, so the app you can communicate with your raspberry pi without having to copy your keys manually (from https://github.com/<your username>.keys)\"}\r\n          </p>\r\n          <br />\r\n        </div>\r\n      )}\r\n      <br />\r\n      <label className=\"checkbox-container indent-1\">\r\n        <input type=\"checkbox\"\r\n          checked={enableReset}\r\n          onChange={() => setEnableReset(!enableReset)}\r\n        />\r\n        <span className=\"checkmark\" />\r\n        Enable Reset GH Keys\r\n      </label>\r\n      <br />\r\n      <div>\r\n        {statusGH}\r\n      </div>\r\n      <button onClick={addKeysFromGithub}>Add SSH Keys From Github</button>\r\n      <br />\r\n      <br />\r\n      <div className=\"key-file\">\r\n        <div>\r\n          Public key file: {settings.publicKeyFile}\r\n        </div>\r\n        <div>\r\n          {/* <button onClick={}>Change</button> */}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        {statusFile}\r\n      </div>\r\n      <button onClick={addKeysFromFile}>Add SSH Keys From File</button>\r\n    </section>\r\n  )\r\n}\r\nexport default Keys"]},"metadata":{},"sourceType":"module"}