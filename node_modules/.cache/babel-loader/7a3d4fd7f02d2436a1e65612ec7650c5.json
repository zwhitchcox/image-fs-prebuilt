{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\src\\\\Image\\\\Flash.tsx\";\nimport \"./Flash.css\";\nimport React, { useState, useContext } from 'react';\nimport SystemInfoContext from '../Contexts/SystemInfoContext';\nimport ActionsContext from '../Contexts/ActionsContext';\n\nconst parseDrive = drive => ({\n  name: drive.drive.description,\n  location: drive.path,\n  size: drive.drive.size\n});\n\nconst Flash = () => {\n  const {\n    drives\n  } = useContext(SystemInfoContext);\n  const {\n    runAction\n  } = useContext(ActionsContext);\n  const [checkedDrives, setCheckedDrives] = useState({});\n\n  const toggleChecked = location => setCheckedDrives({ ...checkedDrives,\n    [location]: !checkedDrives[location]\n  });\n\n  const parsedDrives = {};\n\n  for (const driveKey in drives) {\n    parsedDrives[driveKey] = parseDrive(drives[driveKey]);\n  }\n\n  const write = () => {\n    runAction({\n      status: \"Writing to drives...\",\n      args: {\n        drives: Object.keys(checkedDrives)\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"top-margin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"Flash SD(s)\"), Object.values(parsedDrives).map((drive, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flash-flex\",\n    key: drive.location,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"checkbox-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: !!checkedDrives[drive.location],\n    onChange: () => toggleChecked(drive.location),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"checkmark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, drive.location), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, drive.name), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, drive.size / Math.pow(10, 9) | 0, \"GB\"))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: write,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"Write\"));\n};\n\nexport default Flash;","map":{"version":3,"sources":["C:/Users/zwhit/dev/cruster/app/src/Image/Flash.tsx"],"names":["React","useState","useContext","SystemInfoContext","ActionsContext","parseDrive","drive","name","description","location","path","size","Flash","drives","runAction","checkedDrives","setCheckedDrives","toggleChecked","parsedDrives","driveKey","write","status","args","Object","keys","values","map","i","Math","pow"],"mappings":"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","sourcesContent":["\r\nimport \"./Flash.css\"\r\nimport React, { useEffect, useState, useRef, useContext } from 'react'\r\nimport SystemInfoContext from '../Contexts/SystemInfoContext';\r\nimport ActionsContext from '../Contexts/ActionsContext';\r\ntype Drive = {\r\n  name: string;\r\n  location: string;\r\n  size: number;\r\n}\r\nconst parseDrive = (drive): Drive => ({\r\n  name: drive.drive.description,\r\n  location: drive.path,\r\n  size: drive.drive.size,\r\n})\r\nconst Flash = () => {\r\n  const {drives} = useContext(SystemInfoContext)\r\n  const {runAction} = useContext(ActionsContext)\r\n  const [checkedDrives, setCheckedDrives] = useState({})\r\n  const toggleChecked = (location) => setCheckedDrives({\r\n    ...checkedDrives,\r\n    [location]: !checkedDrives[location]\r\n  })\r\n  const parsedDrives:{[key: string]: Drive}  = {}\r\n  for (const driveKey in drives) {\r\n    parsedDrives[driveKey] = parseDrive(drives[driveKey])\r\n  }\r\n  const write = () => {\r\n    runAction({\r\n      status: \"Writing to drives...\",\r\n      args: {\r\n        drives: Object.keys(checkedDrives)\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"boxed\">\r\n      <h3 className=\"top-margin\">Flash SD(s)</h3>\r\n        {Object.values(parsedDrives).map((drive, i) => (\r\n          <div className=\"flash-flex\" key={drive.location}>\r\n            <div>\r\n              <label className=\"checkbox-container\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={!!checkedDrives[drive.location]}\r\n                  onChange={() => toggleChecked(drive.location)}\r\n                />\r\n                <span className=\"checkmark\" />\r\n              </label>\r\n            </div>\r\n            <div>{drive.location}</div>\r\n            <div>{drive.name}</div>\r\n            <div>{(drive.size/Math.pow(10, 9))|0}GB</div>\r\n          </div>\r\n        ))}\r\n        <button onClick={write}>Write</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Flash"]},"metadata":{},"sourceType":"module"}