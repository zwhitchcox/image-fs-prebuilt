{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\src\\\\Clusters\\\\Create\\\\CreateSetup.tsx\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nexport const getHostname = ({\n  clusterName,\n  cluster,\n  ip,\n  index\n}) => `${clusterName ? clusterName + \"-\" : \"\"}` + `${cluster.master === ip ? \"master\" : \"slave-\" + (index + 1)}.local`;\n\nconst validateClusterName = name => {\n  if (!name.length) return true;\n  return /^[A-Za-z0-9]([A-Za-z0-9]|-){0,55}$/.test(name);\n};\n\nconst lastNumIP = ip => Number(ip.split('.')[3]);\n\nconst sortByIP = (a, b) => lastNumIP(a) - lastNumIP(b);\n\nconst validateCluster = cluster => {\n  const errors = [];\n\n  if (!cluster.master) {\n    errors.push(\"Cluster must have master node.\");\n  }\n\n  if (!cluster.slaves.length) {\n    errors.push(\"Cluster must have at least one slave node.\");\n  }\n\n  return errors;\n};\n\nconst CreateSetup = ({\n  clusterName,\n  setClusterName,\n  cluster,\n  setMaster,\n  addNode,\n  removeNode,\n  nodes,\n  addNodes,\n  removeAll\n}) => {\n  const history = useHistory();\n  const clusterErrors = validateCluster(cluster);\n  const [attempted, setAttempted] = useState(false);\n\n  const launch = () => {\n    setAttempted(true);\n\n    if (!clusterErrors.length) {\n      history.push(\"/clusters/create/run\");\n    }\n  };\n\n  const ips = Object.keys(nodes);\n  ips.sort(sortByIP);\n  const availableIPs = ips.filter(ip => nodes[ip].apiResponded && nodes[ip].status === \"UNINITIALIZED\" && ip !== cluster.master && !cluster.slaves.includes(ip)); // const availableIPs = ips\n  //   .filter(ip => (\n  //     ip !== cluster.master &&\n  //     !cluster.slaves.includes(ip) &&\n  //     nodes[ip].apiResponded &&\n  //     nodes[ip].status === \"UNINITIALIZED\"))\n\n  const nonresponsive = ips.filter(ip => !nodes[ip].apiResponded);\n  const takenIPs = ips.filter(ip => nodes[ip].apiResponded && nodes[ip].status !== \"UNINITIALIZED\"); // const uninitialized = ips.filter(ip => {\n  //   nodes[ip].apiResponded &&\n  //   nodes[ip].status === \"UNINITIALIZED\"\n  // })\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"upper-create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"Cluster Name\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"Cluster Name\",\n    value: clusterName,\n    onChange: e => setClusterName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), validateClusterName(clusterName) ? \"\" : \"Invalid Name.\")), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"Cluster Nodes\"), !attempted ? \"\" : clusterErrors.map(err => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 51\n    }\n  }, err)), !cluster.master && !cluster.slaves.length ? \"You have not added any nodes.\" : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 88\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"node-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, \"ip\"), /*#__PURE__*/React.createElement(\"th\", {\n    colSpan: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, \"actions\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"new hostname\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, cluster.master === \"\" ? null : /*#__PURE__*/React.createElement(ClusterNode, Object.assign({\n    ip: cluster.master,\n    setMaster,\n    clusterName,\n    cluster,\n    addNode,\n    removeNode,\n    index: null\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 44\n    }\n  })), cluster.slaves.map((ip, index) => /*#__PURE__*/React.createElement(ClusterNode, Object.assign({\n    key: ip\n  }, {\n    ip,\n    clusterName,\n    setMaster,\n    cluster,\n    addNode,\n    removeNode,\n    index\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }))))), cluster.master !== \"\" || cluster.slaves.length ? /*#__PURE__*/React.createElement(\"div\", {\n    onClick: removeAll,\n    className: \"action indent-1 top-margin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 60\n    }\n  }, \"Remove All\") : \"\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button-two\",\n    onClick: launch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, \"Launch\")), availableIPs.length ? /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 30\n    }\n  }, \"Available Nodes\") : \"\", /*#__PURE__*/React.createElement(\"table\", {\n    className: \"available-node-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, availableIPs.map(ip => /*#__PURE__*/React.createElement(AvailableNode, Object.assign({\n    key: ip\n  }, {\n    ip,\n    setMaster,\n    addNode\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }))))), availableIPs.length ? /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => addNodes(availableIPs),\n    className: \"action indent-1 top-margin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 30\n    }\n  }, \"Add All\") : \"\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }), nonresponsive.length === 0 ? \"\" : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 42\n    }\n  }, \"The following ip addresses have a cluster, but the api didn't respond for some reason:\", /*#__PURE__*/React.createElement(\"table\", {\n    className: \"available-node-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, nonresponsive.map(ip => /*#__PURE__*/React.createElement(NonResponsiveNode, {\n    key: ip,\n    ip: ip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }))))), takenIPs.length === 0 ? \"\" : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 37\n    }\n  }, \"The following nodes are already in use:\", /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, takenIPs.sort(sortByIP).map(ip => /*#__PURE__*/React.createElement(\"tr\", {\n    key: ip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, ip, \"\\xA0\\xA0\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => history.push(`/clusters/node-ssh/${ip}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, \"ssh\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => history.push(`/clusters/node-ssh/${ip}/reset`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, \"reset\"))))))));\n};\n\nexport default CreateSetup;\n\nconst NonResponsiveNode = ({\n  ip\n}) => {\n  const history = useHistory();\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 5\n    }\n  }, ip), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => history.push(`/clusters/node-ssh/${ip}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }\n  }, \"ssh\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => history.push(`/clusters/node-ssh/${ip}/reset`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 5\n    }\n  }, \"reset\")));\n};\n\nconst AvailableNode = ({\n  ip,\n  addNode,\n  setMaster\n}) => {\n  const history = useHistory();\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }, ip), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => addNode(ip),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }, \"Add\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => setMaster(ip),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, \"Make Master\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => history.push(`/clusters/node-ssh/${ip}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }\n  }, \"ssh\")));\n};\n\nconst ClusterNode = ({\n  ip,\n  removeNode,\n  setMaster,\n  cluster,\n  clusterName,\n  index\n}) => {\n  const history = useHistory();\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }\n  }, ip), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => removeNode(ip),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }, \"Remove\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }\n  }, cluster.master === ip ? \" Master\" : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => setMaster(ip),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 46\n    }\n  }, \"Make Master\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => history.push(`/clusters/node-ssh/${ip}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, \"ssh\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }\n  }, getHostname({\n    clusterName,\n    cluster,\n    ip,\n    index\n  })));\n};","map":{"version":3,"sources":["C:/Users/zwhit/dev/cruster/app/src/Clusters/Create/CreateSetup.tsx"],"names":["React","useState","useHistory","getHostname","clusterName","cluster","ip","index","master","validateClusterName","name","length","test","lastNumIP","Number","split","sortByIP","a","b","validateCluster","errors","push","slaves","CreateSetup","setClusterName","setMaster","addNode","removeNode","nodes","addNodes","removeAll","history","clusterErrors","attempted","setAttempted","launch","ips","Object","keys","sort","availableIPs","filter","apiResponded","status","includes","nonresponsive","takenIPs","e","target","value","map","err","NonResponsiveNode","AvailableNode","ClusterNode"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport const getHostname = ({clusterName, cluster, ip, index}) => (\r\n  `${clusterName ? clusterName + \"-\" : \"\"}` +\r\n  `${cluster.master === ip ? \"master\" : \"slave-\" +(index+1)}.local`\r\n)\r\nconst validateClusterName = name => {\r\n  if (!name.length) return true\r\n  return /^[A-Za-z0-9]([A-Za-z0-9]|-){0,55}$/.test(name)\r\n}\r\nconst lastNumIP = ip => Number(ip.split('.')[3])\r\nconst sortByIP = (a, b) => lastNumIP(a) - lastNumIP(b)\r\nconst validateCluster = (cluster) => {\r\n  const errors: string[] = []\r\n  if (!cluster.master) {\r\n    errors.push(\"Cluster must have master node.\")\r\n  }\r\n  if (!cluster.slaves.length) {\r\n    errors.push(\"Cluster must have at least one slave node.\")\r\n  }\r\n  return errors\r\n}\r\n\r\nconst CreateSetup = ({\r\n  clusterName,\r\n  setClusterName,\r\n  cluster,\r\n  setMaster,\r\n  addNode,\r\n  removeNode,\r\n  nodes,\r\n  addNodes,\r\n  removeAll,\r\n}) => {\r\n  const history = useHistory()\r\n  const clusterErrors = validateCluster(cluster)\r\n  const [attempted, setAttempted] = useState(false)\r\n  const launch = () => {\r\n    setAttempted(true)\r\n    if (!clusterErrors.length) {\r\n      history.push(\"/clusters/create/run\")\r\n    }\r\n  }\r\n  const ips = Object.keys(nodes)\r\n  ips.sort(sortByIP)\r\n  const availableIPs = ips.filter(ip =>\r\n      nodes[ip].apiResponded &&\r\n      nodes[ip].status === \"UNINITIALIZED\" &&\r\n      ip !== cluster.master &&\r\n      !cluster.slaves.includes(ip))\r\n  // const availableIPs = ips\r\n  //   .filter(ip => (\r\n  //     ip !== cluster.master &&\r\n  //     !cluster.slaves.includes(ip) &&\r\n  //     nodes[ip].apiResponded &&\r\n  //     nodes[ip].status === \"UNINITIALIZED\"))\r\n\r\n  const nonresponsive = ips\r\n      .filter(ip => !nodes[ip].apiResponded)\r\n  const takenIPs = ips.filter(ip => nodes[ip].apiResponded && nodes[ip].status !== \"UNINITIALIZED\")\r\n  // const uninitialized = ips.filter(ip => {\r\n  //   nodes[ip].apiResponded &&\r\n  //   nodes[ip].status === \"UNINITIALIZED\"\r\n  // })\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"upper-create\">\r\n        <label>\r\n        Cluster Name<br />\r\n        <input\r\n          placeholder=\"Cluster Name\"\r\n          value={clusterName}\r\n          onChange={e => setClusterName(e.target.value)}\r\n        />\r\n        {validateClusterName(clusterName) ? \"\" : \"Invalid Name.\"}\r\n        </label>\r\n      </div>\r\n      <h4>Cluster Nodes</h4>\r\n      {!attempted ? \"\" : clusterErrors.map(err => <div className=\"error\">{err}</div>)}\r\n      {(!cluster.master && !cluster.slaves.length) ? \"You have not added any nodes.\" : <div>\r\n        <table className=\"node-list\">\r\n          <thead>\r\n            <tr>\r\n            <th>ip</th>\r\n            <th colSpan={2}>actions</th>\r\n            <th></th>\r\n            <th>new hostname</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {cluster.master === \"\"  ? null : <ClusterNode\r\n            {...({\r\n              ip: cluster.master,\r\n              setMaster,\r\n              clusterName,\r\n              cluster,\r\n              addNode,\r\n              removeNode,\r\n              index: null,\r\n            })}\r\n          />}\r\n          {cluster.slaves.map((ip, index) => (\r\n            <ClusterNode\r\n              key={ip}\r\n              {...({\r\n                ip,\r\n                clusterName,\r\n                setMaster,\r\n                cluster,\r\n                addNode,\r\n                removeNode,\r\n                index,\r\n              })}\r\n            />\r\n          ))}\r\n          </tbody>\r\n        </table>\r\n        {cluster.master !== \"\" || cluster.slaves.length  ? <div onClick={removeAll} className=\"action indent-1 top-margin\">Remove All</div> : \"\"}\r\n        <br />\r\n        <button className=\"button-two\" onClick={launch}>Launch</button>\r\n      </div>}\r\n      {availableIPs.length ? <h4>Available Nodes</h4> : \"\"}\r\n      {/* {uninitialized.length && Object.values(nodes).length ? \"Couldn't find any uninitialized nodes...\": \"\"} */}\r\n      <table className=\"available-node-list\">\r\n      <tbody>\r\n        {availableIPs\r\n          .map(ip => (\r\n          <AvailableNode\r\n            key={ip}\r\n            {...({\r\n              ip,\r\n              setMaster,\r\n              addNode,\r\n            })}\r\n          />\r\n        ))}\r\n      </tbody>\r\n      </table>\r\n      {availableIPs.length ? <div onClick={() => addNodes(availableIPs)} className=\"action indent-1 top-margin\">Add All</div> : \"\"}\r\n      <br />\r\n      <br />\r\n      {nonresponsive.length === 0 ? \"\" : <div>\r\n        The following ip addresses have a cluster, but the api didn't respond for some reason:\r\n        <table className=\"available-node-list\">\r\n        <tbody>\r\n          {nonresponsive\r\n            .map(ip => (\r\n            <NonResponsiveNode\r\n              key={ip}\r\n              ip={ip}\r\n            />\r\n          ))}\r\n        </tbody>\r\n        </table>\r\n      </div>}\r\n      {takenIPs.length === 0 ? \"\" : <div>\r\n        The following nodes are already in use:\r\n        <table>\r\n          <tbody>\r\n          {takenIPs.sort(sortByIP).map(ip => (\r\n            <tr key={ip}>\r\n            <td>\r\n              {ip}&nbsp;&nbsp;\r\n            </td>\r\n            <td>\r\n            <span\r\n                className=\"action\"\r\n                onClick={() => history.push(`/clusters/node-ssh/${ip}`)}\r\n              >ssh</span>\r\n            <span\r\n                className=\"action\"\r\n                onClick={() => history.push(`/clusters/node-ssh/${ip}/reset`)}\r\n              >reset</span>\r\n            </td>\r\n            </tr>\r\n          ))}\r\n          </tbody>\r\n        </table>\r\n      </div>}\r\n    </div>\r\n  )\r\n}\r\nexport default CreateSetup\r\n\r\nconst NonResponsiveNode = ({ip}) => {\r\n  const history = useHistory()\r\n  return <tr>\r\n    <td>\r\n    {ip}\r\n    </td>\r\n    <td>\r\n      <span className=\"action\" onClick={() => history.push(`/clusters/node-ssh/${ip}`)}>ssh</span>\r\n    </td>\r\n    <td>\r\n    <span\r\n        className=\"action\"\r\n        onClick={() => history.push(`/clusters/node-ssh/${ip}/reset`)}\r\n      >reset</span>\r\n    </td>\r\n  </tr>\r\n}\r\n\r\nconst AvailableNode = ({ip, addNode, setMaster}) => {\r\n  const history = useHistory()\r\n  return (\r\n    <tr>\r\n      <td>\r\n      {ip}\r\n      </td>\r\n      <td>\r\n        <span className=\"action\" onClick={() => addNode(ip)}>Add</span>\r\n      </td>\r\n      <td>\r\n        <span className=\"action\" onClick={() => setMaster(ip)}>Make Master</span>\r\n      </td>\r\n      <td>\r\n        <span className=\"action\" onClick={() => history.push(`/clusters/node-ssh/${ip}`)}>ssh</span>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nconst ClusterNode = ({ip, removeNode, setMaster, cluster, clusterName, index}) => {\r\n  const history = useHistory()\r\n  return (\r\n    <tr>\r\n      <td>\r\n      {ip}\r\n      </td>\r\n      <td>\r\n      <span className=\"action\" onClick={() => removeNode(ip)}>Remove</span>\r\n      </td>\r\n      <td>\r\n        {cluster.master === ip ? \" Master\" : <span className=\"action\" onClick={() => setMaster(ip)}>Make Master</span>}\r\n      </td>\r\n      <td>\r\n        <span className=\"action\" onClick={() => history.push(`/clusters/node-ssh/${ip}`)}>ssh</span>\r\n      </td>\r\n      <td>\r\n        {getHostname({clusterName, cluster, ip, index})}\r\n      </td>\r\n    </tr>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}