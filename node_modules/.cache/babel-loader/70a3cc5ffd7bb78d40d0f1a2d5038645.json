{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useContext,useState}from'react';import SettingsContext from'../../Contexts/SettingsContext';import ActionsContext from'../../Contexts/ActionsContext';var Keys=function Keys(){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),statusFile=_useState2[0],setStatusFile=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),statusGH=_useState4[0],setStatusGH=_useState4[1];var settings=useContext(SettingsContext);var _useContext=useContext(ActionsContext),runAction=_useContext.runAction,addToLog=_useContext.addToLog;var _useState5=useState(settings.defaultGithubUsername),_useState6=_slicedToArray(_useState5,2),ghUsername=_useState6[0],setGHUsername=_useState6[1];// TODO: add help for every field\nvar _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),whyGHUsername=_useState8[0],setWhyGHUsername=_useState8[1];var _useState9=useState(true),_useState10=_slicedToArray(_useState9,2),enableReset=_useState10[0],setEnableReset=_useState10[1];var _useState11=useState(true),_useState12=_slicedToArray(_useState11,2),overwrite=_useState12[0],setOverwrite=_useState12[1];var addKeysFromGithub=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(ghUsername===\"\"||typeof ghUsername===\"undefined\")){_context.next=3;break;}setStatusGH(\"No Github username specified\");return _context.abrupt(\"return\");case 3:setStatusGH(\"Adding keys from \".concat(ghUsername));_context.prev=4;_context.next=7;return runAction({type:\"add-public-keys-github\",status:\"Adding SSH keys from github...\",args:{overwrite:overwrite,ghUsername:ghUsername,enableReset:enableReset}});case 7:setStatusGH(\"Success!\");_context.next=13;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](4);setStatusGH(\"Error: see log for more details (top right)\");case 13:case\"end\":return _context.stop();}}},_callee,null,[[4,10]]);}));return function addKeysFromGithub(){return _ref.apply(this,arguments);};}();var addKeysFromFile=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:setStatusFile(\"Adding keys from \".concat(settings.publicKeyFile));_context2.prev=1;_context2.next=4;return runAction({type:\"add-public-keys-file\",status:\"Adding SSH keys from \".concat(settings.publicKeyFile,\"...\"),args:{overwrite:overwrite}});case 4:setStatusFile(\"Success!\");_context2.next=10;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](1);setStatusFile(\"Error: See log for more details (top right\");case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[1,7]]);}));return function addKeysFromFile(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(\"section\",null,/*#__PURE__*/React.createElement(\"h3\",{className:\"top-margin\"},\"SSH Keys\"),/*#__PURE__*/React.createElement(\"label\",{className:\"checkbox-container indent-1\"},/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",checked:overwrite,onChange:function onChange(){return setOverwrite(!overwrite);}}),/*#__PURE__*/React.createElement(\"span\",{className:\"checkmark\"}),\"Overwrite Current Keys\"),/*#__PURE__*/React.createElement(\"div\",{className:\"text-input-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"label\"},\"Github Username:\\xA0\\xA0\",/*#__PURE__*/React.createElement(\"span\",{className:\"modal-link\",onClick:function onClick(){return setWhyGHUsername(!whyGHUsername);}},\"?\")),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"input\",{placeholder:\"Your Github Username\",className:\"text-field-github\",type:\"text\",onChange:function onChange(e){return setGHUsername(e.target.value);},value:ghUsername}))),!whyGHUsername?\"\":/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"p\",{className:\"note\"},\"We can retrieve the public keys from your github account, so the app you can communicate with your raspberry pi without having to copy your keys manually (from https://github.com/<your username>.keys)\"),/*#__PURE__*/React.createElement(\"br\",null)),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"label\",{className:\"checkbox-container indent-1\"},/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",checked:enableReset,onChange:function onChange(){return setEnableReset(!enableReset);}}),/*#__PURE__*/React.createElement(\"span\",{className:\"checkmark\"}),\"Enable Reset GH Keys\"),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"div\",null,statusGH),/*#__PURE__*/React.createElement(\"button\",{onClick:addKeysFromGithub},\"Add SSH Keys From Github\"),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"div\",{className:\"key-file\"},/*#__PURE__*/React.createElement(\"div\",null,\"Public key file: \",settings.publicKeyFile),/*#__PURE__*/React.createElement(\"div\",null)),/*#__PURE__*/React.createElement(\"div\",null,statusFile),/*#__PURE__*/React.createElement(\"button\",{onClick:addKeysFromFile},\"Add SSH Keys From File\"));};export default Keys;","map":{"version":3,"sources":["C:/Users/zwhit/dev/cruster/app/src/Image/Setup/Keys.tsx"],"names":["React","useContext","useState","SettingsContext","ActionsContext","Keys","statusFile","setStatusFile","statusGH","setStatusGH","settings","runAction","addToLog","defaultGithubUsername","ghUsername","setGHUsername","whyGHUsername","setWhyGHUsername","enableReset","setEnableReset","overwrite","setOverwrite","addKeysFromGithub","type","status","args","addKeysFromFile","publicKeyFile","e","target","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport SettingsContext from '../../Contexts/SettingsContext';\r\nimport ActionsContext from '../../Contexts/ActionsContext';\r\nconst Keys = () => {\r\n  const [statusFile, setStatusFile] = useState(\"\")\r\n  const [statusGH, setStatusGH] = useState(\"\")\r\n  const settings = useContext(SettingsContext)\r\n  const { runAction, addToLog } = useContext(ActionsContext)\r\n  const [ghUsername, setGHUsername] = useState(settings.defaultGithubUsername)\r\n  // TODO: add help for every field\r\n  const [whyGHUsername, setWhyGHUsername] = useState(false)\r\n  const [enableReset, setEnableReset] = useState(true)\r\n  const [overwrite, setOverwrite] = useState(true)\r\n  const addKeysFromGithub = async () => {\r\n    if (ghUsername === \"\" || typeof ghUsername === \"undefined\") {\r\n      setStatusGH(\"No Github username specified\")\r\n      return\r\n    }\r\n    setStatusGH(`Adding keys from ${ghUsername}`)\r\n    try {\r\n      await runAction({\r\n        type: \"add-public-keys-github\",\r\n        status: \"Adding SSH keys from github...\",\r\n        args: {\r\n          overwrite,\r\n          ghUsername,\r\n          enableReset,\r\n        }\r\n      })\r\n      setStatusGH(\"Success!\")\r\n    } catch(err) {\r\n      setStatusGH(\"Error: see log for more details (top right)\")\r\n    }\r\n  }\r\n  const addKeysFromFile = async () => {\r\n    setStatusFile(`Adding keys from ${settings.publicKeyFile}`)\r\n    try {\r\n      await runAction({\r\n        type: \"add-public-keys-file\",\r\n        status: `Adding SSH keys from ${settings.publicKeyFile}...`,\r\n        args: {\r\n          overwrite,\r\n        }\r\n      })\r\n      setStatusFile(`Success!`)\r\n    } catch (err) {\r\n      setStatusFile(\"Error: See log for more details (top right\")\r\n    }\r\n  }\r\n  return (\r\n    <section>\r\n      <h3 className=\"top-margin\">SSH Keys</h3>\r\n      <label className=\"checkbox-container indent-1\">\r\n        <input type=\"checkbox\"\r\n          checked={overwrite}\r\n          onChange={() => setOverwrite(!overwrite)}\r\n        />\r\n        <span className=\"checkmark\" />\r\n        Overwrite Current Keys\r\n      </label>\r\n      <div className=\"text-input-container\">\r\n        <div className=\"label\">\r\n          Github Username:&nbsp;&nbsp;\r\n          <span className=\"modal-link\" onClick={() => setWhyGHUsername(!whyGHUsername)}>?</span>\r\n        </div>\r\n        <div>\r\n          <input\r\n            placeholder=\"Your Github Username\"\r\n            className=\"text-field-github\"\r\n            type=\"text\"\r\n            onChange={e => setGHUsername(e.target.value)}\r\n            value={ghUsername}\r\n          />\r\n        </div>\r\n      </div>\r\n      {!whyGHUsername ? \"\" : (\r\n        <div>\r\n          <p className=\"note\">\r\n            {\"We can retrieve the public keys from your github account, so the app you can communicate with your raspberry pi without having to copy your keys manually (from https://github.com/<your username>.keys)\"}\r\n          </p>\r\n          <br />\r\n        </div>\r\n      )}\r\n      <br />\r\n      <label className=\"checkbox-container indent-1\">\r\n        <input type=\"checkbox\"\r\n          checked={enableReset}\r\n          onChange={() => setEnableReset(!enableReset)}\r\n        />\r\n        <span className=\"checkmark\" />\r\n        Enable Reset GH Keys\r\n      </label>\r\n      <br />\r\n      <div>\r\n        {statusGH}\r\n      </div>\r\n      <button onClick={addKeysFromGithub}>Add SSH Keys From Github</button>\r\n      <br />\r\n      <br />\r\n      <div className=\"key-file\">\r\n        <div>\r\n          Public key file: {settings.publicKeyFile}\r\n        </div>\r\n        <div>\r\n          {/* <button onClick={}>Change</button> */}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        {statusFile}\r\n      </div>\r\n      <button onClick={addKeysFromFile}>Add SSH Keys From File</button>\r\n    </section>\r\n  )\r\n}\r\nexport default Keys"]},"metadata":{},"sourceType":"module"}