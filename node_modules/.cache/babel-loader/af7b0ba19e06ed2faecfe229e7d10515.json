{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\src\\\\Image\\\\Download.tsx\";\nimport React, { useState, useContext } from \"react\";\nimport ActionsContext from '../Contexts/ActionsContext';\nconst statuses = {\n  DOWNLOADING: \"Downloading...\",\n  INACTIVE: \"\",\n  UNZIPPING: \"Unzipping...\"\n};\n\nconst Download = () => {\n  const {\n    DOWNLOADING,\n    INACTIVE,\n    UNZIPPING\n  } = statuses;\n  const [status, setStatus] = useState(INACTIVE);\n  const {\n    runAction\n  } = useContext(ActionsContext);\n  const [downloadPercentage, setDownloadPercentage] = useState(0);\n  const [unzipPercentage, setUnzipPercentage] = useState(0);\n  const [forceRedownload, setForceRedownload] = useState(false);\n  const [forceReunzip, setForceReunzip] = useState(false);\n\n  const run = async () => {\n    if (status !== INACTIVE) return;\n\n    try {\n      setStatus(DOWNLOADING);\n      await runAction({\n        status: \"Downloading image...\",\n        type: \"download-image\",\n        args: {\n          force: forceRedownload\n        },\n        onProgress: ({\n          percentage\n        }) => setDownloadPercentage(percentage)\n      });\n      setStatus(UNZIPPING);\n      await runAction({\n        status: \"Unzipping image...\",\n        type: \"unzip-image\",\n        args: {\n          force: forceReunzip\n        },\n        onProgress: ({\n          percentage\n        }) => setUnzipPercentage(percentage)\n      });\n      setStatus(INACTIVE);\n    } catch (err) {\n      setStatus(INACTIVE);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"top-margin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"Download Disk Image\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkbox-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"checkbox-container indent-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: forceRedownload,\n    onChange: () => setForceRedownload(!forceRedownload),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"checkmark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), \"Force Re-Download\"), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"checkbox-container indent-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: forceReunzip,\n    onChange: () => setForceReunzip(!forceReunzip),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"checkmark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }), \"Overwrite node.img\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: run,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"Download Image\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), status !== DOWNLOADING ? \"\" : /*#__PURE__*/React.createElement(ProgressBar, {\n    percentage: downloadPercentage,\n    title: DOWNLOADING,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 38\n    }\n  }), status !== UNZIPPING ? \"\" : /*#__PURE__*/React.createElement(ProgressBar, {\n    percentage: unzipPercentage,\n    title: UNZIPPING,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 36\n    }\n  }));\n};\n\nexport default Download;\n\nconst ProgressBar = ({\n  percentage,\n  title\n}) => /*#__PURE__*/React.createElement(React.Fragment, null, title ? /*#__PURE__*/React.createElement(\"div\", {\n  className: \"progress-title\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 12\n  }\n}, title) : \"\", /*#__PURE__*/React.createElement(\"div\", {\n  className: \"progress-bar\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"progress-percentage\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }\n}, `${percentage.toPrecision(3)}%`), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"progress-bar-container\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"progress-bar-bg\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(\"div\", {\n  style: {\n    width: `${percentage}%`\n  },\n  className: \"progress-bar-progress\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }\n}))));","map":{"version":3,"sources":["C:/Users/zwhit/dev/cruster/app/src/Image/Download.tsx"],"names":["React","useState","useContext","ActionsContext","statuses","DOWNLOADING","INACTIVE","UNZIPPING","Download","status","setStatus","runAction","downloadPercentage","setDownloadPercentage","unzipPercentage","setUnzipPercentage","forceRedownload","setForceRedownload","forceReunzip","setForceReunzip","run","type","args","force","onProgress","percentage","err","ProgressBar","title","toPrecision","width"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from \"react\"\r\nimport { v4 } from 'uuid'\r\nimport ActionsContext from '../Contexts/ActionsContext';\r\n\r\nconst statuses = {\r\n  DOWNLOADING: \"Downloading...\",\r\n  INACTIVE: \"\",\r\n  UNZIPPING: \"Unzipping...\",\r\n}\r\n\r\nconst Download = () => {\r\n  const {\r\n    DOWNLOADING,\r\n    INACTIVE,\r\n    UNZIPPING,\r\n  } = statuses\r\n\r\n  const [status, setStatus] = useState(INACTIVE)\r\n\r\n  const {runAction} = useContext(ActionsContext)\r\n\r\n  const [downloadPercentage, setDownloadPercentage] = useState(0)\r\n  const [unzipPercentage, setUnzipPercentage] = useState(0)\r\n\r\n  const [forceRedownload, setForceRedownload] = useState(false)\r\n  const [forceReunzip, setForceReunzip] = useState(false)\r\n  const run = async () => {\r\n    if (status !== INACTIVE) return\r\n    try {\r\n      setStatus(DOWNLOADING)\r\n      await runAction({\r\n        status: \"Downloading image...\",\r\n        type: \"download-image\",\r\n        args: {force: forceRedownload},\r\n        onProgress: ({percentage}) => setDownloadPercentage(percentage),\r\n      })\r\n      setStatus(UNZIPPING)\r\n      await runAction({\r\n        status: \"Unzipping image...\",\r\n        type: \"unzip-image\",\r\n        args: {force: forceReunzip},\r\n        onProgress: ({percentage}) => setUnzipPercentage(percentage),\r\n      })\r\n      setStatus(INACTIVE)\r\n    } catch (err) {\r\n      setStatus(INACTIVE)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"boxed\">\r\n      <h3 className=\"top-margin\">Download Disk Image</h3>\r\n      <div className=\"checkbox-options\">\r\n        <label className=\"checkbox-container indent-1\">\r\n          <input type=\"checkbox\"\r\n            checked={forceRedownload}\r\n            onChange={() => setForceRedownload(!forceRedownload)}\r\n          />\r\n          <span className=\"checkmark\" />\r\n          Force Re-Download\r\n        </label>\r\n        <label className=\"checkbox-container indent-1\">\r\n          <input type=\"checkbox\"\r\n            checked={forceReunzip}\r\n            onChange={() => setForceReunzip(!forceReunzip)}\r\n          />\r\n          <span className=\"checkmark\" />\r\n          Overwrite node.img\r\n        </label>\r\n      </div>\r\n      <br />\r\n      <button onClick={run}>Download Image</button>\r\n      <br />\r\n      {status !== DOWNLOADING ? \"\" : <ProgressBar percentage={downloadPercentage} title={DOWNLOADING} />}\r\n      {status !== UNZIPPING ? \"\" : <ProgressBar percentage={unzipPercentage} title={UNZIPPING} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Download\r\n\r\nconst ProgressBar = ({percentage, title}) => (\r\n  <>\r\n  {title ? <div className=\"progress-title\">{title}</div> : \"\"}\r\n  <div className=\"progress-bar\">\r\n    <div className=\"progress-percentage\">{`${percentage.toPrecision(3)}%`}</div>\r\n    <div className=\"progress-bar-container\">\r\n      <div className=\"progress-bar-bg\" />\r\n      <div\r\n        style={{width: `${percentage}%`}}\r\n        className=\"progress-bar-progress\"\r\n      />\r\n    </div>\r\n  </div>\r\n  </>\r\n)"]},"metadata":{},"sourceType":"module"}