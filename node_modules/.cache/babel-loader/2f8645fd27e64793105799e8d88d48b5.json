{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\src\\\\Clusters\\\\Manage\\\\RunCmdAll.tsx\";\nimport React, { useState, useContext } from 'react';\nimport ActionsContext from '../../Contexts/ActionsContext';\nimport SystemInfoContext from '../../Contexts/SystemInfoContext';\nimport RunMultipleSSH from './RunMultipleSSH';\nimport \"./RunCmdAll.css\";\n\nconst RunCmdAll = () => {\n  const {\n    nodes\n  } = useContext(SystemInfoContext);\n  const [processes, setProcesses] = useState([]);\n  const {\n    multiSSH\n  } = useContext(ActionsContext);\n  const [finished, setFinished] = useState(false);\n  const [running, setRunning] = useState(false);\n  const [cmd, setCmd] = useState(\"\");\n  const [username, setUsername] = useState(\"root\");\n  const ips = Object.keys(nodes);\n\n  const run = async () => {\n    setRunning(true);\n    const {\n      runAll,\n      startAll,\n      endAll,\n      processes\n    } = multiSSH({\n      ips,\n      username,\n      interactive: true\n    });\n    setProcesses(processes);\n    await startAll();\n    await runAll({\n      cmd\n    });\n    setFinished(true);\n    await endAll();\n  }; // TODO: no spell check, better interface in general for command entering\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }), \"examples:\", /*#__PURE__*/React.createElement(\"ul\", {\n    style: {\n      listStyleType: 'none',\n      lineHeight: 1.5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, \"Reboot:\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, \"reboot\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \"Change Password:\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, \"echo \\\"pi:new_password\\\" | chpasswd\"))), running ? \"\" : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, \"username: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: username,\n    onChange: e => setUsername(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 104\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 109\n    }\n  }), \"command: \", /*#__PURE__*/React.createElement(\"input\", {\n    className: \"console-input\",\n    type: \"text\",\n    value: cmd,\n    onChange: e => setCmd(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 113\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: run,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Run\")), !running ? \"\" : /*#__PURE__*/React.createElement(RunMultipleSSH, {\n    processes: processes,\n    finished: finished,\n    showInit: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 22\n    }\n  }));\n};\n\nexport default RunCmdAll;","map":{"version":3,"sources":["C:/Users/zwhit/dev/cruster/app/src/Clusters/Manage/RunCmdAll.tsx"],"names":["React","useState","useContext","ActionsContext","SystemInfoContext","RunMultipleSSH","RunCmdAll","nodes","processes","setProcesses","multiSSH","finished","setFinished","running","setRunning","cmd","setCmd","username","setUsername","ips","Object","keys","run","runAll","startAll","endAll","interactive","listStyleType","lineHeight","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\r\nimport ActionsContext from '../../Contexts/ActionsContext';\r\nimport SystemInfoContext from '../../Contexts/SystemInfoContext';\r\nimport RunMultipleSSH from './RunMultipleSSH';\r\nimport \"./RunCmdAll.css\"\r\n\r\nconst RunCmdAll = () => {\r\n  const { nodes } = useContext(SystemInfoContext)\r\n  const [processes, setProcesses] = useState<any>([])\r\n  const { multiSSH } = useContext(ActionsContext)\r\n  const [finished, setFinished] = useState(false)\r\n  const [running, setRunning] = useState(false)\r\n  const [cmd, setCmd] = useState(\"\")\r\n  const [username, setUsername] = useState(\"root\")\r\n  const ips = Object.keys(nodes)\r\n  const run = async () => {\r\n    setRunning(true)\r\n    const {runAll, startAll, endAll, processes} = multiSSH({\r\n      ips,\r\n      username,\r\n      interactive: true,\r\n    })\r\n    setProcesses(processes)\r\n    await startAll()\r\n    await runAll({cmd})\r\n    setFinished(true)\r\n    await endAll()\r\n  }\r\n\r\n  // TODO: no spell check, better interface in general for command entering\r\n  return (<div>\r\n    <br />\r\n    examples:\r\n    <ul style={{listStyleType: 'none', lineHeight: 1.5}}>\r\n      <li>Reboot:</li>\r\n      <li><pre>reboot</pre></li>\r\n      <li>Change Password:</li>\r\n      <li><pre>echo \"pi:new_password\" | chpasswd</pre></li>\r\n    </ul>\r\n\r\n    {running ? \"\" : <div>\r\n      username: <br /><input type=\"text\" value={username} onChange={e => setUsername(e.target.value)}/><br/><br />\r\n      command: <input className=\"console-input\" type=\"text\" value={cmd} onChange={e => setCmd(e.target.value)}/><br/>\r\n      <button onClick={run}>Run</button>\r\n    </div>}\r\n    {!running ? \"\" : <RunMultipleSSH processes={processes} finished={finished} showInit={false} />}\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default RunCmdAll\r\n"]},"metadata":{},"sourceType":"module"}