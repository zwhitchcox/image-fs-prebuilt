{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState,useContext}from'react';import\"./Create.css\";import{Switch,Route}from\"react-router-dom\";import SystemInfoContext from'../../Contexts/SystemInfoContext';import CreateSetup from'./CreateSetup';import CreateRun from'./CreateRun';var Create=function Create(){var _useContext=useContext(SystemInfoContext),nodes=_useContext.nodes;var takenClusterNames=Object.keys(Object.values(nodes).reduce(function(prev,cur){if(!cur.apiResponded){return prev;}prev[cur.clustername]=true;return prev;},{}));var ips=Object.keys(nodes);var availableIPs=ips.filter(function(ip){return nodes[ip].apiResponded&&nodes[ip].status===\"UNINITIALIZED\";});var _useState=useState({master:availableIPs.length&&availableIPs[0]||\"\",slaves:availableIPs.slice(1)}),_useState2=_slicedToArray(_useState,2),cluster=_useState2[0],setCluster=_useState2[1];var startClusterName=\"cruster\";var i=2;while(takenClusterNames.includes(startClusterName)){startClusterName=\"cruster-\".concat(i);}var _useState3=useState(startClusterName),_useState4=_slicedToArray(_useState3,2),clusterName=_useState4[0],setClusterName=_useState4[1];var addNode=function addNode(ip){setCluster(_objectSpread(_objectSpread({},cluster),{},{slaves:[].concat(_toConsumableArray(cluster.slaves),[ip])}));};var addNodes=function addNodes(ips){setCluster(_objectSpread(_objectSpread({},cluster),{},{slaves:[].concat(_toConsumableArray(cluster.slaves),_toConsumableArray(ips))}));};var removeNode=function removeNode(ip){if(cluster.master===ip){setCluster({master:\"\",slaves:cluster.slaves});}else{setCluster(_objectSpread(_objectSpread({},cluster),{},{slaves:cluster.slaves.filter(function(_ip){return _ip!==ip;})}));}};var removeAll=function removeAll(){setCluster({master:\"\",slaves:[]});};var setMaster=function setMaster(ip){if(cluster.master!==\"\"){if(ip===cluster.master)return;setCluster({master:ip,slaves:[].concat(_toConsumableArray(cluster.slaves.filter(function(n){return n!==ip;})),[cluster.master])});}else{setCluster({slaves:_toConsumableArray(cluster.slaves.filter(function(n){return n!==ip;})),master:ip});}};useEffect(function(){ipcRenderer.send(\"refresh-nodes\");},[]);return/*#__PURE__*/React.createElement(\"div\",{className:\"boxed\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Create Cluster\"),/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(Route,{path:\"/clusters/create/setup\"},/*#__PURE__*/React.createElement(CreateSetup,{clusterName:clusterName,setClusterName:setClusterName,addNode:addNode,removeNode:removeNode,nodes:nodes,cluster:cluster,setMaster:setMaster,addNodes:addNodes,removeAll:removeAll})),/*#__PURE__*/React.createElement(Route,{path:\"/clusters/create/run\"},/*#__PURE__*/React.createElement(CreateRun,{cluster:cluster,clusterName:clusterName}))));};export default Create;// const uninitialized = Object.entries(nodes)\n//   .reduce((prev, [url, node]: any) => {\n//     if (node.status === UNINITIALIZED) {\n//       prev.push(url)\n//     }\n//     return prev\n//   }, [] as any)\n// uninitialized.sort(sortByIP)\n// const available = uninitialized.filter(url => {\n//   return !(cluster.slaves.some(s => s === url) || cluster.master === url)\n// })\n// const nonresponsive = Object.entries(nodes)\n//   .reduce((prev, [url, node]:any) => {\n//     if (!node.apiResponded) {\n//       prev.push(ipFromUrl(url))\n//     }\n//     return prev\n//   }, [] as string[])","map":{"version":3,"sources":["C:/Users/zwhit/dev/cruster/app/src/Clusters/Create/Create.tsx"],"names":["React","useEffect","useState","useContext","Switch","Route","SystemInfoContext","CreateSetup","CreateRun","Create","nodes","takenClusterNames","Object","keys","values","reduce","prev","cur","apiResponded","clustername","ips","availableIPs","filter","ip","status","master","length","slaves","slice","cluster","setCluster","startClusterName","i","includes","clusterName","setClusterName","addNode","addNodes","removeNode","_ip","removeAll","setMaster","n","ipcRenderer","send"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef, useContext } from 'react'\r\nimport \"./Create.css\"\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Link,\r\n} from \"react-router-dom\";\r\nimport SystemInfoContext from '../../Contexts/SystemInfoContext';\r\nimport CreateSetup from './CreateSetup';\r\nimport CreateRun from './CreateRun'\r\n\r\nconst Create = () => {\r\n  const {nodes} = useContext(SystemInfoContext)\r\n  const takenClusterNames = Object.keys(Object.values(nodes).reduce((prev, cur:any) => {\r\n    if (!cur.apiResponded) {\r\n      return prev\r\n    }\r\n    prev[cur.clustername] = true\r\n    return prev\r\n  }, ({} as any)))\r\n  const ips = Object.keys(nodes)\r\n  const availableIPs = ips.filter(ip => nodes[ip].apiResponded && nodes[ip].status === \"UNINITIALIZED\")\r\n  const [cluster, setCluster] = useState({\r\n    master: (availableIPs.length && availableIPs[0]) || \"\",\r\n    slaves: (availableIPs.slice(1)) as string[],\r\n  })\r\n  let startClusterName = \"cruster\"\r\n  let i = 2;\r\n  while (takenClusterNames.includes(startClusterName)) {\r\n    startClusterName = `cruster-${i}`\r\n  }\r\n  const [clusterName, setClusterName] = useState(startClusterName)\r\n  const addNode = ip => {\r\n    setCluster({\r\n      ...cluster,\r\n      slaves: [\r\n        ...cluster.slaves,\r\n        ip,\r\n      ]\r\n    })\r\n  }\r\n  const addNodes = ips => {\r\n    setCluster({\r\n      ...cluster,\r\n      slaves: [\r\n        ...cluster.slaves,\r\n        ...ips,\r\n      ]\r\n    })\r\n  }\r\n\r\n  const removeNode = ip => {\r\n    if (cluster.master === ip) {\r\n      setCluster({\r\n        master: \"\",\r\n        slaves: cluster.slaves,\r\n      })\r\n    } else {\r\n      setCluster({\r\n        ...cluster,\r\n        slaves: cluster.slaves.filter(_ip => _ip !== ip)\r\n      })\r\n    }\r\n  }\r\n\r\n  const removeAll = () => {\r\n    setCluster({\r\n      master: \"\",\r\n      slaves: [],\r\n    })\r\n  }\r\n\r\n  const setMaster = ip => {\r\n    if (cluster.master !== \"\") {\r\n      if (ip === cluster.master) return\r\n      setCluster({\r\n        master: ip,\r\n        slaves: [\r\n          ...cluster.slaves.filter(n => n !== ip),\r\n          cluster.master,\r\n        ]\r\n      })\r\n    } else {\r\n      setCluster({\r\n        slaves: [\r\n          ...cluster.slaves.filter(n => n !== ip),\r\n        ],\r\n        master: ip,\r\n      })\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    ipcRenderer.send(\"refresh-nodes\")\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"boxed\">\r\n      <h3>Create Cluster</h3>\r\n      <Switch>\r\n        <Route path=\"/clusters/create/setup\">\r\n          <CreateSetup {...({\r\n            clusterName,\r\n            setClusterName,\r\n            addNode,\r\n            removeNode,\r\n            nodes,\r\n            cluster,\r\n            setMaster,\r\n            addNodes,\r\n            removeAll,\r\n          })} />\r\n        </Route>\r\n        <Route path=\"/clusters/create/run\">\r\n          <CreateRun {...({\r\n            cluster,\r\n            clusterName\r\n          })} />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Create\r\n// const uninitialized = Object.entries(nodes)\r\n//   .reduce((prev, [url, node]: any) => {\r\n//     if (node.status === UNINITIALIZED) {\r\n//       prev.push(url)\r\n//     }\r\n//     return prev\r\n//   }, [] as any)\r\n// uninitialized.sort(sortByIP)\r\n\r\n// const available = uninitialized.filter(url => {\r\n//   return !(cluster.slaves.some(s => s === url) || cluster.master === url)\r\n// })\r\n\r\n// const nonresponsive = Object.entries(nodes)\r\n//   .reduce((prev, [url, node]:any) => {\r\n//     if (!node.apiResponded) {\r\n//       prev.push(ipFromUrl(url))\r\n//     }\r\n//     return prev\r\n//   }, [] as string[])"]},"metadata":{},"sourceType":"module"}