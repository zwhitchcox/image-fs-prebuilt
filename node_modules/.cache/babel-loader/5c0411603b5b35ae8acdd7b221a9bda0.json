{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\src\\\\Clusters\\\\Manage\\\\ManageClusters.tsx\";\nimport React, { useContext, useState } from 'react';\nimport SystemInfoContext from '../../Contexts/SystemInfoContext';\nimport { Link, useHistory } from 'react-router-dom';\nimport ActionsContext from '../../Contexts/ActionsContext';\n\nconst lastNumIP = ip => Number(ip.split('.')[3]);\n\nconst sortByMasterIP = (a, b) => lastNumIP(a.masterip) - lastNumIP(b.masterip);\n\nconst ManageClusters = () => {\n  const {\n    nodes\n  } = useContext(SystemInfoContext);\n  const clusters = Object.values(nodes).reduce((prev, cur) => {\n    const {\n      masterip,\n      clustername\n    } = cur;\n    if (!masterip) return prev;\n\n    if (!prev[masterip]) {\n      prev[masterip] = {\n        clustername,\n        masterip: masterip,\n        master: {},\n        slaves: []\n      };\n    }\n\n    if (cur.status === \"SLAVE\") {\n      prev[masterip].slaves.push(cur);\n    } else if (cur.status === \"MASTER\") {\n      prev[masterip].master = cur;\n    }\n\n    return prev;\n  }, {});\n  let clustersArr = Object.values(clusters);\n  clustersArr.sort(sortByMasterIP);\n  clustersArr = clustersArr.filter(cluster => {\n    return cluster.masterip !== \"\";\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"Manage Clusters\"), !clustersArr.length ? \"No clusters found on this network.\" : /*#__PURE__*/React.createElement(React.Fragment, null, Object.values(clusters).map(cluster => /*#__PURE__*/React.createElement(Cluster, {\n    key: cluster.masterip,\n    cluster: cluster,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 55\n    }\n  })), /*#__PURE__*/React.createElement(Link, {\n    to: \"/clusters/reset-all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, \"Go Nuclear - Reset All\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    to: \"/clusters/run-cmd-all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, \"Run Command on All Pis At Once\"))));\n};\n\nconst Cluster = ({\n  cluster\n}) => {\n  const history = useHistory();\n  const {\n    runAction\n  } = useContext(ActionsContext);\n  const [kubeStatus, setKubeStatus] = useState(\"\");\n\n  const downloadKube = async () => {\n    setKubeStatus(\"Downloading...\");\n\n    try {\n      await runAction({\n        type: \"scp-download\",\n        args: {\n          ip: cluster.master.masterip,\n          remotePath: \"/root/.kube/config\",\n          localPath: ipcRenderer.sendSync(\"kube-config-path\")\n        }\n      });\n    } catch (error) {\n      setKubeStatus(error.toString());\n    }\n\n    setKubeStatus(\"Copied successfully!\");\n  };\n\n  const [resetGHStatus, setResetGHStatus] = useState(\"\");\n\n  const resetGithubKeys = async ({\n    ip\n  }) => {\n    setResetGHStatus(\"Attempting to fetch keys from github...\");\n\n    try {\n      await fetch(`http:${ip}:9090/reset-github-keys`);\n      setResetGHStatus(\"Success!\");\n      setTimeout(() => setResetGHStatus(\"\"), 2500);\n    } catch (err) {\n      setResetGHStatus(\"Could not reset github keys\");\n      setTimeout(() => setResetGHStatus(\"\"), 2500);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, cluster.clustername), \"Master: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"indent-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, cluster.master.ip, \"\\xA0\\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => history.push(`/clusters/node-ssh/${cluster.master.ip}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"ssh\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => history.push(`/clusters/node-ssh/${cluster.master.ip}/reset`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"reset kubernetes\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => resetGithubKeys({\n      ip: cluster.master.ip\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, \"reset github keys\")), \"Slaves: \", /*#__PURE__*/React.createElement(\"table\", {\n    className: \"indent-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, cluster.slaves.map(({\n    ip\n  }) => /*#__PURE__*/React.createElement(SlaveNode, {\n    key: ip,\n    ip: ip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 37\n    }\n  })))), \"Actions:\", /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: downloadKube,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, \"get kube config\"), \" \", kubeStatus)));\n};\n\nconst SlaveNode = ({\n  ip\n}) => {\n  const history = useHistory();\n  const [resetGHStatus, setResetGHStatus] = useState(\"\");\n\n  const resetGithubKeys = async ({\n    ip\n  }) => {\n    setResetGHStatus(\"Attempting to fetch keys from github...\");\n\n    try {\n      await fetch(`http:${ip}:9090/reset-github-keys`);\n      setResetGHStatus(\"Success!\");\n      setTimeout(() => setResetGHStatus(\"\"), 2500);\n    } catch (err) {\n      setResetGHStatus(\"Could not reset github keys\");\n      setTimeout(() => setResetGHStatus(\"\"), 2500);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, ip, \"\\xA0\\xA0\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => history.push(`/clusters/node-ssh/${ip}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, \"ssh\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => history.push(`/clusters/node-ssh/${ip}/reset`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, \"reset kubernetes\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action\",\n    onClick: () => resetGithubKeys({\n      ip\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, \"reset github keys\"), resetGHStatus));\n};\n\nexport default ManageClusters;","map":{"version":3,"sources":["C:/Users/zwhit/dev/cruster/app/src/Clusters/Manage/ManageClusters.tsx"],"names":["React","useContext","useState","SystemInfoContext","Link","useHistory","ActionsContext","lastNumIP","ip","Number","split","sortByMasterIP","a","b","masterip","ManageClusters","nodes","clusters","Object","values","reduce","prev","cur","clustername","master","slaves","status","push","clustersArr","sort","filter","cluster","length","map","Cluster","history","runAction","kubeStatus","setKubeStatus","downloadKube","type","args","remotePath","localPath","ipcRenderer","sendSync","error","toString","resetGHStatus","setResetGHStatus","resetGithubKeys","fetch","setTimeout","err","SlaveNode"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport SystemInfoContext from '../../Contexts/SystemInfoContext';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport ActionsContext from '../../Contexts/ActionsContext';\r\n\r\nconst lastNumIP = ip => Number(ip.split('.')[3])\r\nconst sortByMasterIP = (a, b) => lastNumIP(a.masterip) - lastNumIP(b.masterip)\r\n\r\nconst ManageClusters = () => {\r\n  const {nodes} = useContext(SystemInfoContext)\r\n  const clusters = Object.values(nodes).reduce((prev, cur:any) => {\r\n    const {masterip, clustername} = cur\r\n    if (!masterip) return prev\r\n    if (!prev[masterip]) {\r\n      prev[masterip] = {\r\n        clustername,\r\n        masterip: masterip,\r\n        master: {} as any,\r\n        slaves: [] as any[],\r\n      }\r\n    }\r\n    if (cur.status === \"SLAVE\") {\r\n      prev[masterip].slaves.push(cur)\r\n    } else if (cur.status === \"MASTER\") {\r\n      prev[masterip].master = cur\r\n    }\r\n    return prev\r\n  }, ({} as any))\r\n  let clustersArr: any[] = Object.values(clusters)\r\n  clustersArr.sort(sortByMasterIP)\r\n  clustersArr = clustersArr.filter((cluster) => {\r\n    return cluster.masterip !== \"\"\r\n  })\r\n  return (\r\n    <div className=\"boxed\">\r\n      <h3>Manage Clusters</h3>\r\n      {!clustersArr.length ? \"No clusters found on this network.\" : <>\r\n        {Object.values(clusters).map((cluster:any) => <Cluster key={cluster.masterip} cluster={cluster} />)}\r\n        <Link to=\"/clusters/reset-all\">\r\n          <button>Go Nuclear - Reset All</button>\r\n        </Link>\r\n        <br />\r\n        <Link to=\"/clusters/run-cmd-all\">\r\n          <button>Run Command on All Pis At Once</button>\r\n        </Link>\r\n      </>}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Cluster = ({cluster}) => {\r\n  const history = useHistory()\r\n  const {runAction} = useContext(ActionsContext)\r\n  const [kubeStatus, setKubeStatus] = useState(\"\")\r\n  const downloadKube = async () => {\r\n    setKubeStatus(\"Downloading...\")\r\n    try {\r\n      await runAction({\r\n        type: \"scp-download\",\r\n        args: {\r\n          ip: cluster.master.masterip,\r\n          remotePath: \"/root/.kube/config\",\r\n          localPath: ipcRenderer.sendSync(\"kube-config-path\"),\r\n        }\r\n      })\r\n    } catch (error) {\r\n      setKubeStatus(error.toString())\r\n    }\r\n    setKubeStatus(\"Copied successfully!\")\r\n  }\r\n  const [resetGHStatus, setResetGHStatus] = useState(\"\")\r\n  const resetGithubKeys = async ({ip}) => {\r\n    setResetGHStatus(\"Attempting to fetch keys from github...\")\r\n    try {\r\n      await fetch(`http:${ip}:9090/reset-github-keys`)\r\n      setResetGHStatus(\"Success!\")\r\n      setTimeout(() => setResetGHStatus(\"\"), 2500)\r\n    } catch (err) {\r\n      setResetGHStatus(\"Could not reset github keys\")\r\n      setTimeout(() => setResetGHStatus(\"\"), 2500)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h4>{cluster.clustername}</h4>\r\n      Master: <br /><div className=\"indent-1\">\r\n        {cluster.master.ip}&nbsp;&nbsp;\r\n        <span className=\"action\" onClick={() => history.push(`/clusters/node-ssh/${cluster.master.ip}`)}>ssh</span>\r\n        <span\r\n            className=\"action\"\r\n            onClick={() => history.push(`/clusters/node-ssh/${cluster.master.ip}/reset`)}\r\n          >reset kubernetes</span>\r\n      <span\r\n          className=\"action\"\r\n          onClick={() => resetGithubKeys({ip: cluster.master.ip})}\r\n        >reset github keys</span>\r\n        </div>\r\n      Slaves: <table className=\"indent-1\">\r\n        <tbody>\r\n      {cluster.slaves.map(({ip}) => <SlaveNode key={ip} ip={ip} />)}\r\n        </tbody>\r\n      </table>\r\n      Actions:\r\n      <ul>\r\n        <li><span className=\"action\" onClick={downloadKube}>get kube config</span> {kubeStatus}</li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\nconst SlaveNode = ({ip}) => {\r\n  const history = useHistory()\r\n  const [resetGHStatus, setResetGHStatus] = useState(\"\")\r\n  const resetGithubKeys = async ({ip}) => {\r\n    setResetGHStatus(\"Attempting to fetch keys from github...\")\r\n    try {\r\n      await fetch(`http:${ip}:9090/reset-github-keys`)\r\n      setResetGHStatus(\"Success!\")\r\n      setTimeout(() => setResetGHStatus(\"\"), 2500)\r\n    } catch (err) {\r\n      setResetGHStatus(\"Could not reset github keys\")\r\n      setTimeout(() => setResetGHStatus(\"\"), 2500)\r\n    }\r\n  }\r\n  return <tr>\r\n    <td>\r\n    {ip}&nbsp;&nbsp;\r\n    </td>\r\n    <td>\r\n      <span className=\"action\" onClick={() => history.push(`/clusters/node-ssh/${ip}`)}>ssh</span>\r\n    </td>\r\n    <td>\r\n    <span\r\n        className=\"action\"\r\n        onClick={() => history.push(`/clusters/node-ssh/${ip}/reset`)}\r\n      >reset kubernetes</span>\r\n    </td>\r\n    <td>\r\n    <span\r\n        className=\"action\"\r\n        onClick={() => resetGithubKeys({ip})}\r\n      >reset github keys</span>\r\n      {resetGHStatus}\r\n    </td>\r\n  </tr>\r\n}\r\n\r\nexport default ManageClusters"]},"metadata":{},"sourceType":"module"}