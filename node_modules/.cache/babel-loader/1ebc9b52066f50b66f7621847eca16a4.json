{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\src\\\\Clusters\\\\Create\\\\Create.tsx\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport \"./Create.css\";\nimport { Switch, Route } from \"react-router-dom\";\nimport SystemInfoContext from '../../Contexts/SystemInfoContext';\nimport CreateSetup from './CreateSetup';\nimport CreateRun from './CreateRun';\n\nconst Create = () => {\n  const {\n    nodes\n  } = useContext(SystemInfoContext);\n  const takenClusterNames = Object.keys(Object.values(nodes).reduce((prev, cur) => {\n    if (!cur.apiResponded) {\n      return prev;\n    }\n\n    prev[cur.clustername] = true;\n    return prev;\n  }, {}));\n  const ips = Object.keys(nodes);\n  const availableIPs = ips.filter(ip => nodes[ip].apiResponded && nodes[ip].status === \"UNINITIALIZED\");\n  const [cluster, setCluster] = useState({\n    master: availableIPs.length && availableIPs[0] || \"\",\n    slaves: availableIPs.slice(1)\n  });\n  let startClusterName = \"cruster\";\n  let i = 2;\n\n  while (takenClusterNames.includes(startClusterName)) {\n    startClusterName = `cruster-${i}`;\n  }\n\n  const [clusterName, setClusterName] = useState(startClusterName);\n\n  const addNode = ip => {\n    setCluster({ ...cluster,\n      slaves: [...cluster.slaves, ip]\n    });\n  };\n\n  const addNodes = ips => {\n    setCluster({ ...cluster,\n      slaves: [...cluster.slaves, ...ips]\n    });\n  };\n\n  const removeNode = ip => {\n    if (cluster.master === ip) {\n      setCluster({\n        master: \"\",\n        slaves: cluster.slaves\n      });\n    } else {\n      setCluster({ ...cluster,\n        slaves: cluster.slaves.filter(_ip => _ip !== ip)\n      });\n    }\n  };\n\n  const removeAll = () => {\n    setCluster({\n      master: \"\",\n      slaves: []\n    });\n  };\n\n  const setMaster = ip => {\n    if (cluster.master !== \"\") {\n      if (ip === cluster.master) return;\n      setCluster({\n        master: ip,\n        slaves: [...cluster.slaves.filter(n => n !== ip), cluster.master]\n      });\n    } else {\n      setCluster({\n        slaves: [...cluster.slaves.filter(n => n !== ip)],\n        master: ip\n      });\n    }\n  };\n\n  useEffect(() => {\n    ipcRenderer.send(\"refresh-nodes\");\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, \"Create Cluster\"), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/clusters/create/setup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CreateSetup, Object.assign({\n    clusterName,\n    setClusterName,\n    addNode,\n    removeNode,\n    nodes,\n    cluster,\n    setMaster,\n    addNodes,\n    removeAll\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Route, {\n    path: \"/clusters/create/run\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CreateRun, Object.assign({\n    cluster,\n    clusterName\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  })))));\n};\n\nexport default Create; // const uninitialized = Object.entries(nodes)\n//   .reduce((prev, [url, node]: any) => {\n//     if (node.status === UNINITIALIZED) {\n//       prev.push(url)\n//     }\n//     return prev\n//   }, [] as any)\n// uninitialized.sort(sortByIP)\n// const available = uninitialized.filter(url => {\n//   return !(cluster.slaves.some(s => s === url) || cluster.master === url)\n// })\n// const nonresponsive = Object.entries(nodes)\n//   .reduce((prev, [url, node]:any) => {\n//     if (!node.apiResponded) {\n//       prev.push(ipFromUrl(url))\n//     }\n//     return prev\n//   }, [] as string[])","map":{"version":3,"sources":["C:/Users/zwhit/dev/cruster/app/src/Clusters/Create/Create.tsx"],"names":["React","useEffect","useState","useContext","Switch","Route","SystemInfoContext","CreateSetup","CreateRun","Create","nodes","takenClusterNames","Object","keys","values","reduce","prev","cur","apiResponded","clustername","ips","availableIPs","filter","ip","status","cluster","setCluster","master","length","slaves","slice","startClusterName","i","includes","clusterName","setClusterName","addNode","addNodes","removeNode","_ip","removeAll","setMaster","n","ipcRenderer","send"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef, useContext } from 'react'\r\nimport \"./Create.css\"\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Link,\r\n} from \"react-router-dom\";\r\nimport SystemInfoContext from '../../Contexts/SystemInfoContext';\r\nimport CreateSetup from './CreateSetup';\r\nimport CreateRun from './CreateRun'\r\n\r\nconst Create = () => {\r\n  const {nodes} = useContext(SystemInfoContext)\r\n  const takenClusterNames = Object.keys(Object.values(nodes).reduce((prev, cur:any) => {\r\n    if (!cur.apiResponded) {\r\n      return prev\r\n    }\r\n    prev[cur.clustername] = true\r\n    return prev\r\n  }, ({} as any)))\r\n  const ips = Object.keys(nodes)\r\n  const availableIPs = ips.filter(ip => nodes[ip].apiResponded && nodes[ip].status === \"UNINITIALIZED\")\r\n  const [cluster, setCluster] = useState({\r\n    master: (availableIPs.length && availableIPs[0]) || \"\",\r\n    slaves: (availableIPs.slice(1)) as string[],\r\n  })\r\n  let startClusterName = \"cruster\"\r\n  let i = 2;\r\n  while (takenClusterNames.includes(startClusterName)) {\r\n    startClusterName = `cruster-${i}`\r\n  }\r\n  const [clusterName, setClusterName] = useState(startClusterName)\r\n  const addNode = ip => {\r\n    setCluster({\r\n      ...cluster,\r\n      slaves: [\r\n        ...cluster.slaves,\r\n        ip,\r\n      ]\r\n    })\r\n  }\r\n  const addNodes = ips => {\r\n    setCluster({\r\n      ...cluster,\r\n      slaves: [\r\n        ...cluster.slaves,\r\n        ...ips,\r\n      ]\r\n    })\r\n  }\r\n\r\n  const removeNode = ip => {\r\n    if (cluster.master === ip) {\r\n      setCluster({\r\n        master: \"\",\r\n        slaves: cluster.slaves,\r\n      })\r\n    } else {\r\n      setCluster({\r\n        ...cluster,\r\n        slaves: cluster.slaves.filter(_ip => _ip !== ip)\r\n      })\r\n    }\r\n  }\r\n\r\n  const removeAll = () => {\r\n    setCluster({\r\n      master: \"\",\r\n      slaves: [],\r\n    })\r\n  }\r\n\r\n  const setMaster = ip => {\r\n    if (cluster.master !== \"\") {\r\n      if (ip === cluster.master) return\r\n      setCluster({\r\n        master: ip,\r\n        slaves: [\r\n          ...cluster.slaves.filter(n => n !== ip),\r\n          cluster.master,\r\n        ]\r\n      })\r\n    } else {\r\n      setCluster({\r\n        slaves: [\r\n          ...cluster.slaves.filter(n => n !== ip),\r\n        ],\r\n        master: ip,\r\n      })\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    ipcRenderer.send(\"refresh-nodes\")\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"boxed\">\r\n      <h3>Create Cluster</h3>\r\n      <Switch>\r\n        <Route path=\"/clusters/create/setup\">\r\n          <CreateSetup {...({\r\n            clusterName,\r\n            setClusterName,\r\n            addNode,\r\n            removeNode,\r\n            nodes,\r\n            cluster,\r\n            setMaster,\r\n            addNodes,\r\n            removeAll,\r\n          })} />\r\n        </Route>\r\n        <Route path=\"/clusters/create/run\">\r\n          <CreateRun {...({\r\n            cluster,\r\n            clusterName\r\n          })} />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Create\r\n// const uninitialized = Object.entries(nodes)\r\n//   .reduce((prev, [url, node]: any) => {\r\n//     if (node.status === UNINITIALIZED) {\r\n//       prev.push(url)\r\n//     }\r\n//     return prev\r\n//   }, [] as any)\r\n// uninitialized.sort(sortByIP)\r\n\r\n// const available = uninitialized.filter(url => {\r\n//   return !(cluster.slaves.some(s => s === url) || cluster.master === url)\r\n// })\r\n\r\n// const nonresponsive = Object.entries(nodes)\r\n//   .reduce((prev, [url, node]:any) => {\r\n//     if (!node.apiResponded) {\r\n//       prev.push(ipFromUrl(url))\r\n//     }\r\n//     return prev\r\n//   }, [] as string[])"]},"metadata":{},"sourceType":"module"}