{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\zwhit\\\\dev\\\\cruster\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useContext,useState}from'react';import SystemInfoContext from'../../Contexts/SystemInfoContext';import{Link,useHistory}from'react-router-dom';import ActionsContext from'../../Contexts/ActionsContext';var lastNumIP=function lastNumIP(ip){return Number(ip.split('.')[3]);};var sortByMasterIP=function sortByMasterIP(a,b){return lastNumIP(a.masterip)-lastNumIP(b.masterip);};var ManageClusters=function ManageClusters(){var _useContext=useContext(SystemInfoContext),nodes=_useContext.nodes;var clusters=Object.values(nodes).reduce(function(prev,cur){var masterip=cur.masterip,clustername=cur.clustername;if(!masterip)return prev;if(!prev[masterip]){prev[masterip]={clustername:clustername,masterip:masterip,master:{},slaves:[]};}if(cur.status===\"SLAVE\"){prev[masterip].slaves.push(cur);}else if(cur.status===\"MASTER\"){prev[masterip].master=cur;}return prev;},{});var clustersArr=Object.values(clusters);clustersArr.sort(sortByMasterIP);clustersArr=clustersArr.filter(function(cluster){return cluster.masterip!==\"\";});return/*#__PURE__*/React.createElement(\"div\",{className:\"boxed\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Manage Clusters\"),!clustersArr.length?\"No clusters found on this network.\":/*#__PURE__*/React.createElement(React.Fragment,null,Object.values(clusters).map(function(cluster){return/*#__PURE__*/React.createElement(Cluster,{key:cluster.masterip,cluster:cluster});}),/*#__PURE__*/React.createElement(Link,{to:\"/clusters/reset-all\"},/*#__PURE__*/React.createElement(\"button\",null,\"Go Nuclear - Reset All\")),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(Link,{to:\"/clusters/run-cmd-all\"},/*#__PURE__*/React.createElement(\"button\",null,\"Run Command on All Pis At Once\"))));};var Cluster=function Cluster(_ref){var cluster=_ref.cluster;var history=useHistory();var _useContext2=useContext(ActionsContext),runAction=_useContext2.runAction;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),kubeStatus=_useState2[0],setKubeStatus=_useState2[1];var downloadKube=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setKubeStatus(\"Downloading...\");_context.prev=1;_context.next=4;return runAction({type:\"scp-download\",args:{ip:cluster.master.masterip,remotePath:\"/root/.kube/config\",localPath:ipcRenderer.sendSync(\"kube-config-path\")}});case 4:_context.next=9;break;case 6:_context.prev=6;_context.t0=_context[\"catch\"](1);setKubeStatus(_context.t0.toString());case 9:setKubeStatus(\"Copied successfully!\");case 10:case\"end\":return _context.stop();}}},_callee,null,[[1,6]]);}));return function downloadKube(){return _ref2.apply(this,arguments);};}();var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),resetGHStatus=_useState4[0],setResetGHStatus=_useState4[1];var resetGithubKeys=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3){var ip;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:ip=_ref3.ip;setResetGHStatus(\"Attempting to fetch keys from github...\");_context2.prev=2;_context2.next=5;return fetch(\"http:\".concat(ip,\":9090/reset-github-keys\"));case 5:setResetGHStatus(\"Success!\");setTimeout(function(){return setResetGHStatus(\"\");},2500);_context2.next=13;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](2);setResetGHStatus(\"Could not reset github keys\");setTimeout(function(){return setResetGHStatus(\"\");},2500);case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[2,9]]);}));return function resetGithubKeys(_x){return _ref4.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h4\",null,cluster.clustername),\"Master: \",/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"div\",{className:\"indent-1\"},cluster.master.ip,\"\\xA0\\xA0\",/*#__PURE__*/React.createElement(\"span\",{className:\"action\",onClick:function onClick(){return history.push(\"/clusters/node-ssh/\".concat(cluster.master.ip));}},\"ssh\"),/*#__PURE__*/React.createElement(\"span\",{className:\"action\",onClick:function onClick(){return history.push(\"/clusters/node-ssh/\".concat(cluster.master.ip,\"/reset\"));}},\"reset kubernetes\"),/*#__PURE__*/React.createElement(\"span\",{className:\"action\",onClick:function onClick(){return resetGithubKeys({ip:cluster.master.ip});}},\"reset github keys\")),\"Slaves: \",/*#__PURE__*/React.createElement(\"table\",{className:\"indent-1\"},/*#__PURE__*/React.createElement(\"tbody\",null,cluster.slaves.map(function(_ref5){var ip=_ref5.ip;return/*#__PURE__*/React.createElement(SlaveNode,{key:ip,ip:ip});}))),\"Actions:\",/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"span\",{className:\"action\",onClick:downloadKube},\"get kube config\"),\" \",kubeStatus)));};var SlaveNode=function SlaveNode(_ref6){var ip=_ref6.ip;var history=useHistory();var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),resetGHStatus=_useState6[0],setResetGHStatus=_useState6[1];var resetGithubKeys=/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref7){var ip;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:ip=_ref7.ip;setResetGHStatus(\"Attempting to fetch keys from github...\");_context3.prev=2;_context3.next=5;return fetch(\"http:\".concat(ip,\":9090/reset-github-keys\"));case 5:setResetGHStatus(\"Success!\");setTimeout(function(){return setResetGHStatus(\"\");},2500);_context3.next=13;break;case 9:_context3.prev=9;_context3.t0=_context3[\"catch\"](2);setResetGHStatus(\"Could not reset github keys\");setTimeout(function(){return setResetGHStatus(\"\");},2500);case 13:case\"end\":return _context3.stop();}}},_callee3,null,[[2,9]]);}));return function resetGithubKeys(_x2){return _ref8.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,ip,\"\\xA0\\xA0\"),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(\"span\",{className:\"action\",onClick:function onClick(){return history.push(\"/clusters/node-ssh/\".concat(ip));}},\"ssh\")),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(\"span\",{className:\"action\",onClick:function onClick(){return history.push(\"/clusters/node-ssh/\".concat(ip,\"/reset\"));}},\"reset kubernetes\")),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(\"span\",{className:\"action\",onClick:function onClick(){return resetGithubKeys({ip:ip});}},\"reset github keys\"),resetGHStatus));};export default ManageClusters;","map":{"version":3,"sources":["C:/Users/zwhit/dev/cruster/app/src/Clusters/Manage/ManageClusters.tsx"],"names":["React","useContext","useState","SystemInfoContext","Link","useHistory","ActionsContext","lastNumIP","ip","Number","split","sortByMasterIP","a","b","masterip","ManageClusters","nodes","clusters","Object","values","reduce","prev","cur","clustername","master","slaves","status","push","clustersArr","sort","filter","cluster","length","map","Cluster","history","runAction","kubeStatus","setKubeStatus","downloadKube","type","args","remotePath","localPath","ipcRenderer","sendSync","toString","resetGHStatus","setResetGHStatus","resetGithubKeys","fetch","setTimeout","SlaveNode"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport SystemInfoContext from '../../Contexts/SystemInfoContext';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport ActionsContext from '../../Contexts/ActionsContext';\r\n\r\nconst lastNumIP = ip => Number(ip.split('.')[3])\r\nconst sortByMasterIP = (a, b) => lastNumIP(a.masterip) - lastNumIP(b.masterip)\r\n\r\nconst ManageClusters = () => {\r\n  const {nodes} = useContext(SystemInfoContext)\r\n  const clusters = Object.values(nodes).reduce((prev, cur:any) => {\r\n    const {masterip, clustername} = cur\r\n    if (!masterip) return prev\r\n    if (!prev[masterip]) {\r\n      prev[masterip] = {\r\n        clustername,\r\n        masterip: masterip,\r\n        master: {} as any,\r\n        slaves: [] as any[],\r\n      }\r\n    }\r\n    if (cur.status === \"SLAVE\") {\r\n      prev[masterip].slaves.push(cur)\r\n    } else if (cur.status === \"MASTER\") {\r\n      prev[masterip].master = cur\r\n    }\r\n    return prev\r\n  }, ({} as any))\r\n  let clustersArr: any[] = Object.values(clusters)\r\n  clustersArr.sort(sortByMasterIP)\r\n  clustersArr = clustersArr.filter((cluster) => {\r\n    return cluster.masterip !== \"\"\r\n  })\r\n  return (\r\n    <div className=\"boxed\">\r\n      <h3>Manage Clusters</h3>\r\n      {!clustersArr.length ? \"No clusters found on this network.\" : <>\r\n        {Object.values(clusters).map((cluster:any) => <Cluster key={cluster.masterip} cluster={cluster} />)}\r\n        <Link to=\"/clusters/reset-all\">\r\n          <button>Go Nuclear - Reset All</button>\r\n        </Link>\r\n        <br />\r\n        <Link to=\"/clusters/run-cmd-all\">\r\n          <button>Run Command on All Pis At Once</button>\r\n        </Link>\r\n      </>}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Cluster = ({cluster}) => {\r\n  const history = useHistory()\r\n  const {runAction} = useContext(ActionsContext)\r\n  const [kubeStatus, setKubeStatus] = useState(\"\")\r\n  const downloadKube = async () => {\r\n    setKubeStatus(\"Downloading...\")\r\n    try {\r\n      await runAction({\r\n        type: \"scp-download\",\r\n        args: {\r\n          ip: cluster.master.masterip,\r\n          remotePath: \"/root/.kube/config\",\r\n          localPath: ipcRenderer.sendSync(\"kube-config-path\"),\r\n        }\r\n      })\r\n    } catch (error) {\r\n      setKubeStatus(error.toString())\r\n    }\r\n    setKubeStatus(\"Copied successfully!\")\r\n  }\r\n  const [resetGHStatus, setResetGHStatus] = useState(\"\")\r\n  const resetGithubKeys = async ({ip}) => {\r\n    setResetGHStatus(\"Attempting to fetch keys from github...\")\r\n    try {\r\n      await fetch(`http:${ip}:9090/reset-github-keys`)\r\n      setResetGHStatus(\"Success!\")\r\n      setTimeout(() => setResetGHStatus(\"\"), 2500)\r\n    } catch (err) {\r\n      setResetGHStatus(\"Could not reset github keys\")\r\n      setTimeout(() => setResetGHStatus(\"\"), 2500)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h4>{cluster.clustername}</h4>\r\n      Master: <br /><div className=\"indent-1\">\r\n        {cluster.master.ip}&nbsp;&nbsp;\r\n        <span className=\"action\" onClick={() => history.push(`/clusters/node-ssh/${cluster.master.ip}`)}>ssh</span>\r\n        <span\r\n            className=\"action\"\r\n            onClick={() => history.push(`/clusters/node-ssh/${cluster.master.ip}/reset`)}\r\n          >reset kubernetes</span>\r\n      <span\r\n          className=\"action\"\r\n          onClick={() => resetGithubKeys({ip: cluster.master.ip})}\r\n        >reset github keys</span>\r\n        </div>\r\n      Slaves: <table className=\"indent-1\">\r\n        <tbody>\r\n      {cluster.slaves.map(({ip}) => <SlaveNode key={ip} ip={ip} />)}\r\n        </tbody>\r\n      </table>\r\n      Actions:\r\n      <ul>\r\n        <li><span className=\"action\" onClick={downloadKube}>get kube config</span> {kubeStatus}</li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\nconst SlaveNode = ({ip}) => {\r\n  const history = useHistory()\r\n  const [resetGHStatus, setResetGHStatus] = useState(\"\")\r\n  const resetGithubKeys = async ({ip}) => {\r\n    setResetGHStatus(\"Attempting to fetch keys from github...\")\r\n    try {\r\n      await fetch(`http:${ip}:9090/reset-github-keys`)\r\n      setResetGHStatus(\"Success!\")\r\n      setTimeout(() => setResetGHStatus(\"\"), 2500)\r\n    } catch (err) {\r\n      setResetGHStatus(\"Could not reset github keys\")\r\n      setTimeout(() => setResetGHStatus(\"\"), 2500)\r\n    }\r\n  }\r\n  return <tr>\r\n    <td>\r\n    {ip}&nbsp;&nbsp;\r\n    </td>\r\n    <td>\r\n      <span className=\"action\" onClick={() => history.push(`/clusters/node-ssh/${ip}`)}>ssh</span>\r\n    </td>\r\n    <td>\r\n    <span\r\n        className=\"action\"\r\n        onClick={() => history.push(`/clusters/node-ssh/${ip}/reset`)}\r\n      >reset kubernetes</span>\r\n    </td>\r\n    <td>\r\n    <span\r\n        className=\"action\"\r\n        onClick={() => resetGithubKeys({ip})}\r\n      >reset github keys</span>\r\n      {resetGHStatus}\r\n    </td>\r\n  </tr>\r\n}\r\n\r\nexport default ManageClusters"]},"metadata":{},"sourceType":"module"}